
002LED_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080072e4  080072e4  000172e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800745c  0800745c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007464  08007464  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800746c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014490  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e51  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003416  00000000  00000000  00039e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  0003d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c0  00000000  00000000  0003e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d9d  00000000  00000000  0003f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001555a  00000000  00000000  0006355d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7fa0  00000000  00000000  00078ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00150a57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005070  00000000  00000000  00150aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072cc 	.word	0x080072cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080072cc 	.word	0x080072cc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014404 	.word	0x20014404

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb8d 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8d5 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the Cycle counter
  	  DWT_CTRL |= (1<<0);
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <main+0xc8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <main+0xc8>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]
  	 SEGGER_UART_init(500000);
 800057a:	482b      	ldr	r0, [pc, #172]	; (8000628 <main+0xcc>)
 800057c:	f004 fc00 	bl	8004d80 <SEGGER_UART_init>
  	 SEGGER_SYSVIEW_Conf();
 8000580:	f004 fa30 	bl	80049e4 <SEGGER_SYSVIEW_Conf>
  	  //SEGGER_SYSVIEW_Start();

  	  status = xTaskCreate(LED1_function,"GREEN LED",200,NULL,2, &LED1_handle);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	4926      	ldr	r1, [pc, #152]	; (800062c <main+0xd0>)
 8000594:	4826      	ldr	r0, [pc, #152]	; (8000630 <main+0xd4>)
 8000596:	f002 fbab 	bl	8002cf0 <xTaskCreate>
 800059a:	61f8      	str	r0, [r7, #28]
  	  configASSERT(status == pdPASS);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b4:	bf00      	nop
 80005b6:	e7fe      	b.n	80005b6 <main+0x5a>

  	  status = xTaskCreate(LED2_function,"RED LED",200,NULL,2, &LED2_handle);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xd8>)
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <main+0xdc>)
 80005ca:	f002 fb91 	bl	8002cf0 <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]
  	  configASSERT(status == pdPASS);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x90>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	617b      	str	r3, [r7, #20]
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x8e>

  	  status = xTaskCreate(LED3_function,"ORANGE LED",200,NULL,2, &LED3_handle);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0xe0>)
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xe4>)
 80005fc:	f002 fb78 	bl	8002cf0 <xTaskCreate>
 8000600:	61f8      	str	r0, [r7, #28]
  	  configASSERT(status == pdPASS);
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	613b      	str	r3, [r7, #16]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>



  	  vTaskStartScheduler();
 800061e:	f002 fcbd 	bl	8002f9c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0xc6>
 8000624:	e0001000 	.word	0xe0001000
 8000628:	0007a120 	.word	0x0007a120
 800062c:	080072e4 	.word	0x080072e4
 8000630:	080009d5 	.word	0x080009d5
 8000634:	080072f0 	.word	0x080072f0
 8000638:	08000a15 	.word	0x08000a15
 800063c:	080072f8 	.word	0x080072f8
 8000640:	08000a55 	.word	0x08000a55

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fe32 	bl	80072bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fdf0 	bl	80012b0 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d6:	f000 f9ef 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2105      	movs	r1, #5
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f851 	bl	80017a0 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000704:	f000 f9d8 	bl	8000ab8 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fd34 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fd2f 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fd29 	bl	8001248 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb7f 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fb71 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fb61 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000852:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb54 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fb44 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	; 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fb34 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb28 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 fb17 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 fb08 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 faf7 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 faea 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fad9 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 facd 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000980:	2301      	movs	r3, #1
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 fabc 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 faaf 	bl	8000f10 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <LED1_function>:

/* USER CODE BEGIN 4 */
static void LED1_function(void* parameters)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	while(1)
		{
			SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <LED1_function+0x34>)
 80009de:	f006 fb8f 	bl	8007100 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <LED1_function+0x38>)
 80009e8:	f000 fc47 	bl	800127a <HAL_GPIO_TogglePin>
			// Blocking Delay
			HAL_Delay(1000);
 80009ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f0:	f000 f988 	bl	8000d04 <HAL_Delay>
			taskYIELD();
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <LED1_function+0x3c>)
 80009f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	f3bf 8f4f 	dsb	sy
 8000a00:	f3bf 8f6f 	isb	sy
			SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000a04:	e7ea      	b.n	80009dc <LED1_function+0x8>
 8000a06:	bf00      	nop
 8000a08:	08007304 	.word	0x08007304
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	e000ed04 	.word	0xe000ed04

08000a14 <LED2_function>:
		}

}
static void LED2_function(void* parameters)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

	while(1)
		{
			SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <LED2_function+0x34>)
 8000a1e:	f006 fb6f 	bl	8007100 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <LED2_function+0x38>)
 8000a28:	f000 fc27 	bl	800127a <HAL_GPIO_TogglePin>
			// Blocking Delay
			HAL_Delay(800);
 8000a2c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a30:	f000 f968 	bl	8000d04 <HAL_Delay>
			taskYIELD();
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <LED2_function+0x3c>)
 8000a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	f3bf 8f6f 	isb	sy
			SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 8000a44:	e7ea      	b.n	8000a1c <LED2_function+0x8>
 8000a46:	bf00      	nop
 8000a48:	08007318 	.word	0x08007318
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	e000ed04 	.word	0xe000ed04

08000a54 <LED3_function>:
		}

}
static void LED3_function(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	while(1)
		{
			SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED");
 8000a5c:	480a      	ldr	r0, [pc, #40]	; (8000a88 <LED3_function+0x34>)
 8000a5e:	f006 fb4f 	bl	8007100 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <LED3_function+0x38>)
 8000a68:	f000 fc07 	bl	800127a <HAL_GPIO_TogglePin>
			// Blocking Delay
			HAL_Delay(400);
 8000a6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a70:	f000 f948 	bl	8000d04 <HAL_Delay>

			taskYIELD();
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <LED3_function+0x3c>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	f3bf 8f6f 	isb	sy
			SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED");
 8000a84:	e7ea      	b.n	8000a5c <LED3_function+0x8>
 8000a86:	bf00      	nop
 8000a88:	0800732c 	.word	0x0800732c
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	e000ed04 	.word	0xe000ed04

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 f90d 	bl	8000cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40001000 	.word	0x40001000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000b02:	f003 fbb9 	bl	8004278 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2036      	movs	r0, #54	; 0x36
 8000b2a:	f000 f9c7 	bl	8000ebc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b2e:	2036      	movs	r0, #54	; 0x36
 8000b30:	f000 f9e0 	bl	8000ef4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 0210 	add.w	r2, r7, #16
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f808 	bl	8001b70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b60:	f000 fff2 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8000b64:	4603      	mov	r3, r0
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_InitTick+0xa8>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	0c9b      	lsrs	r3, r3, #18
 8000b74:	3b01      	subs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_InitTick+0xb0>)
 8000b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b9a:	f001 f81b 	bl	8001bd4 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_InitTick+0xac>)
 8000ba6:	f001 f86f 	bl	8001c88 <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3730      	adds	r7, #48	; 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20014378 	.word	0x20014378
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM6_DAC_IRQHandler+0x10>)
 8000bfa:	f001 f8b5 	bl	8001d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20014378 	.word	0x20014378

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f006 faef 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc7d 	bl	800055c <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c70:	0800746c 	.word	0x0800746c
  ldr r2, =_sbss
 8000c74:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c78:	200144ac 	.word	0x200144ac

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f8fc 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ff30 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff ff06 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	200143c0 	.word	0x200143c0

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200143c0 	.word	0x200143c0

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ece:	f7ff ff61 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	6978      	ldr	r0, [r7, #20]
 8000eda:	f7ff ffb1 	bl	8000e40 <NVIC_EncodePriority>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff80 	bl	8000dec <__NVIC_SetPriority>
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff54 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e16b      	b.n	8001204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 815a 	bne.w	80011fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b60      	ldr	r3, [pc, #384]	; (800121c <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5f      	ldr	r2, [pc, #380]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a5b      	ldr	r2, [pc, #364]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a51      	ldr	r2, [pc, #324]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a50      	ldr	r2, [pc, #320]	; (800122c <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_GPIO_Init+0x324>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <HAL_GPIO_Init+0x328>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20a>
 8001116:	2307      	movs	r3, #7
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111a:	2308      	movs	r3, #8
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_GPIO_Init+0x310>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117a:	4a32      	ldr	r2, [pc, #200]	; (8001244 <HAL_GPIO_Init+0x334>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae90 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128c:	887a      	ldrh	r2, [r7, #2]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	041a      	lsls	r2, r3, #16
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43d9      	mvns	r1, r3
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	400b      	ands	r3, r1
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e264      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d075      	beq.n	80013ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ce:	4ba3      	ldr	r3, [pc, #652]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d00c      	beq.n	80012f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4ba0      	ldr	r3, [pc, #640]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d112      	bne.n	800130c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b9d      	ldr	r3, [pc, #628]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012f2:	d10b      	bne.n	800130c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	4b99      	ldr	r3, [pc, #612]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d05b      	beq.n	80013b8 <HAL_RCC_OscConfig+0x108>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d157      	bne.n	80013b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e23f      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x74>
 8001316:	4b91      	ldr	r3, [pc, #580]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a90      	ldr	r2, [pc, #576]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0xb0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x98>
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a8a      	ldr	r2, [pc, #552]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a87      	ldr	r2, [pc, #540]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0xb0>
 8001348:	4b84      	ldr	r3, [pc, #528]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a83      	ldr	r2, [pc, #524]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a80      	ldr	r2, [pc, #512]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fcc0 	bl	8000cec <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fcbc 	bl	8000cec <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e204      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b76      	ldr	r3, [pc, #472]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0xc0>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fcac 	bl	8000cec <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fca8 	bl	8000cec <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e1f0      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	4b6c      	ldr	r3, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0xe8>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d063      	beq.n	800148e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b62      	ldr	r3, [pc, #392]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d11c      	bne.n	8001418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b5f      	ldr	r3, [pc, #380]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d116      	bne.n	8001418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x152>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e1c4      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b56      	ldr	r3, [pc, #344]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4952      	ldr	r1, [pc, #328]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	e03a      	b.n	800148e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001420:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <HAL_RCC_OscConfig+0x2b0>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001426:	f7ff fc61 	bl	8000cec <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff fc5d 	bl	8000cec <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e1a5      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144c:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4940      	ldr	r1, [pc, #256]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800145c:	4313      	orrs	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
 8001460:	e015      	b.n	800148e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_OscConfig+0x2b0>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fc40 	bl	8000cec <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001470:	f7ff fc3c 	bl	8000cec <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e184      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	4b36      	ldr	r3, [pc, #216]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d030      	beq.n	80014fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d016      	beq.n	80014d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_RCC_OscConfig+0x2b4>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a8:	f7ff fc20 	bl	8000cec <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc1c 	bl	8000cec <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e164      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x200>
 80014ce:	e015      	b.n	80014fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_RCC_OscConfig+0x2b4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fc09 	bl	8000cec <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014de:	f7ff fc05 	bl	8000cec <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e14d      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80a0 	beq.w	800164a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_RCC_OscConfig+0x2ac>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_RCC_OscConfig+0x2b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d121      	bne.n	800158a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_RCC_OscConfig+0x2b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_RCC_OscConfig+0x2b8>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbcb 	bl	8000cec <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e011      	b.n	800157e <HAL_RCC_OscConfig+0x2ce>
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	42470000 	.word	0x42470000
 8001564:	42470e80 	.word	0x42470e80
 8001568:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156c:	f7ff fbbe 	bl	8000cec <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e106      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b85      	ldr	r3, [pc, #532]	; (8001794 <HAL_RCC_OscConfig+0x4e4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2f0>
 8001592:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a80      	ldr	r2, [pc, #512]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
 800159e:	e01c      	b.n	80015da <HAL_RCC_OscConfig+0x32a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x312>
 80015a8:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a7a      	ldr	r2, [pc, #488]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	4b78      	ldr	r3, [pc, #480]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a77      	ldr	r2, [pc, #476]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0x32a>
 80015c2:	4b75      	ldr	r3, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a74      	ldr	r2, [pc, #464]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	4b72      	ldr	r3, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a71      	ldr	r2, [pc, #452]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb83 	bl	8000cec <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb7f 	bl	8000cec <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0c5      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ee      	beq.n	80015ea <HAL_RCC_OscConfig+0x33a>
 800160c:	e014      	b.n	8001638 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fb6d 	bl	8000cec <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb69 	bl	8000cec <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0af      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d105      	bne.n	800164a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a55      	ldr	r2, [pc, #340]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 8001644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 809b 	beq.w	800178a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d05c      	beq.n	800171a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d141      	bne.n	80016ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x4ec>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb3d 	bl	8000cec <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb39 	bl	8000cec <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e081      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69da      	ldr	r2, [r3, #28]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	019b      	lsls	r3, r3, #6
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	085b      	lsrs	r3, r3, #1
 80016ac:	3b01      	subs	r3, #1
 80016ae:	041b      	lsls	r3, r3, #16
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	061b      	lsls	r3, r3, #24
 80016b8:	4937      	ldr	r1, [pc, #220]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_OscConfig+0x4ec>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb12 	bl	8000cec <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fb0e 	bl	8000cec <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e056      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x41c>
 80016ea:	e04e      	b.n	800178a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_OscConfig+0x4ec>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fafb 	bl	8000cec <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff faf7 	bl	8000cec <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e03f      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x44a>
 8001718:	e037      	b.n	800178a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e032      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_RCC_OscConfig+0x4e8>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d028      	beq.n	8001786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d121      	bne.n	8001786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d11a      	bne.n	8001786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800175c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175e:	4293      	cmp	r3, r2
 8001760:	d111      	bne.n	8001786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	3b01      	subs	r3, #1
 8001770:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d107      	bne.n	8001786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40007000 	.word	0x40007000
 8001798:	40023800 	.word	0x40023800
 800179c:	42470060 	.word	0x42470060

080017a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0cc      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d90c      	bls.n	80017dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b65      	ldr	r3, [pc, #404]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b63      	ldr	r3, [pc, #396]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0b8      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001818:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	494d      	ldr	r1, [pc, #308]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d044      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d119      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e07f      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d003      	beq.n	800185e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	2b03      	cmp	r3, #3
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e06f      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e067      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f023 0203 	bic.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4934      	ldr	r1, [pc, #208]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001890:	f7ff fa2c 	bl	8000cec <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	e00a      	b.n	80018ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff fa28 	bl	8000cec <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e04f      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 020c 	and.w	r2, r3, #12
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1eb      	bne.n	8001898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d20c      	bcs.n	80018e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e032      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4916      	ldr	r1, [pc, #88]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	490e      	ldr	r1, [pc, #56]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001926:	f000 f821 	bl	800196c <HAL_RCC_GetSysClockFreq>
 800192a:	4602      	mov	r2, r0
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	490a      	ldr	r1, [pc, #40]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	5ccb      	ldrb	r3, [r1, r3]
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f8e4 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00
 800195c:	40023800 	.word	0x40023800
 8001960:	0800741c 	.word	0x0800741c
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	2300      	movs	r3, #0
 800197e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001984:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b08      	cmp	r3, #8
 800198e:	d00d      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x40>
 8001990:	2b08      	cmp	r3, #8
 8001992:	f200 80bd 	bhi.w	8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x34>
 800199a:	2b04      	cmp	r3, #4
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800199e:	e0b7      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019a2:	60bb      	str	r3, [r7, #8]
       break;
 80019a4:	e0b7      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a6:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019a8:	60bb      	str	r3, [r7, #8]
      break;
 80019aa:	e0b4      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ac:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d04d      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c2:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	461a      	mov	r2, r3
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019d2:	f04f 0100 	mov.w	r1, #0
 80019d6:	ea02 0800 	and.w	r8, r2, r0
 80019da:	ea03 0901 	and.w	r9, r3, r1
 80019de:	4640      	mov	r0, r8
 80019e0:	4649      	mov	r1, r9
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	014b      	lsls	r3, r1, #5
 80019ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019f0:	0142      	lsls	r2, r0, #5
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	ebb0 0008 	subs.w	r0, r0, r8
 80019fa:	eb61 0109 	sbc.w	r1, r1, r9
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	018b      	lsls	r3, r1, #6
 8001a08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a0c:	0182      	lsls	r2, r0, #6
 8001a0e:	1a12      	subs	r2, r2, r0
 8001a10:	eb63 0301 	sbc.w	r3, r3, r1
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	00d9      	lsls	r1, r3, #3
 8001a1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a22:	00d0      	lsls	r0, r2, #3
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	eb12 0208 	adds.w	r2, r2, r8
 8001a2c:	eb43 0309 	adc.w	r3, r3, r9
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	0259      	lsls	r1, r3, #9
 8001a3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a3e:	0250      	lsls	r0, r2, #9
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	f7fe fc08 	bl	8000264 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e04a      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	461a      	mov	r2, r3
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	ea02 0400 	and.w	r4, r2, r0
 8001a76:	ea03 0501 	and.w	r5, r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	014b      	lsls	r3, r1, #5
 8001a88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a8c:	0142      	lsls	r2, r0, #5
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	1b00      	subs	r0, r0, r4
 8001a94:	eb61 0105 	sbc.w	r1, r1, r5
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	018b      	lsls	r3, r1, #6
 8001aa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aa6:	0182      	lsls	r2, r0, #6
 8001aa8:	1a12      	subs	r2, r2, r0
 8001aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001aae:	f04f 0000 	mov.w	r0, #0
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	00d9      	lsls	r1, r3, #3
 8001ab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001abc:	00d0      	lsls	r0, r2, #3
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	1912      	adds	r2, r2, r4
 8001ac4:	eb45 0303 	adc.w	r3, r5, r3
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0299      	lsls	r1, r3, #10
 8001ad2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ad6:	0290      	lsls	r0, r2, #10
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	f7fe fbbc 	bl	8000264 <__aeabi_uldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4613      	mov	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
      break;
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b12:	60bb      	str	r3, [r7, #8]
      break;
 8001b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b16:	68bb      	ldr	r3, [r7, #8]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	007a1200 	.word	0x007a1200

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	0800742c 	.word	0x0800742c

08001b70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_RCC_GetClockConfig+0x60>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0207 	and.w	r2, r3, #7
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e041      	b.n	8001c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f839 	bl	8001c72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f000 f9d8 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e04e      	b.n	8001d3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d022      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cca:	d01d      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d018      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d013      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00e      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d009      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d010      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	e007      	b.n	8001d3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	40010400 	.word	0x40010400
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40001800 	.word	0x40001800

08001d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0202 	mvn.w	r2, #2
 8001d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8ee 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8e0 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8f1 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0204 	mvn.w	r2, #4
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c4 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b6 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8c7 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d122      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d11b      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f89a 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f88c 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f89d 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0210 	mvn.w	r2, #16
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2208      	movs	r2, #8
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f870 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f862 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f873 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0201 	mvn.w	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fdd4 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f902 	bl	800211c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d10e      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b40      	cmp	r3, #64	; 0x40
 8001f32:	d107      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f838 	bl	8001fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0220 	mvn.w	r2, #32
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8cc 	bl	8002108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <TIM_Base_SetConfig+0x114>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d00f      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <TIM_Base_SetConfig+0x118>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00b      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3c      	ldr	r2, [pc, #240]	; (80020e4 <TIM_Base_SetConfig+0x11c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3b      	ldr	r2, [pc, #236]	; (80020e8 <TIM_Base_SetConfig+0x120>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <TIM_Base_SetConfig+0x124>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <TIM_Base_SetConfig+0x114>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d027      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <TIM_Base_SetConfig+0x118>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d023      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <TIM_Base_SetConfig+0x11c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <TIM_Base_SetConfig+0x120>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a29      	ldr	r2, [pc, #164]	; (80020ec <TIM_Base_SetConfig+0x124>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d017      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <TIM_Base_SetConfig+0x128>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <TIM_Base_SetConfig+0x12c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <TIM_Base_SetConfig+0x130>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <TIM_Base_SetConfig+0x134>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a24      	ldr	r2, [pc, #144]	; (8002100 <TIM_Base_SetConfig+0x138>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <TIM_Base_SetConfig+0x13c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <TIM_Base_SetConfig+0x114>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0xf8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <TIM_Base_SetConfig+0x124>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d103      	bne.n	80020c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	615a      	str	r2, [r3, #20]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40000c00 	.word	0x40000c00
 80020ec:	40010400 	.word	0x40010400
 80020f0:	40014000 	.word	0x40014000
 80020f4:	40014400 	.word	0x40014400
 80020f8:	40014800 	.word	0x40014800
 80020fc:	40001800 	.word	0x40001800
 8002100:	40001c00 	.word	0x40001c00
 8002104:	40002000 	.word	0x40002000

08002108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0208 	add.w	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 0208 	add.w	r2, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f103 0208 	add.w	r2, r3, #8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d103      	bne.n	80021f2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e00c      	b.n	800220c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3308      	adds	r3, #8
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e002      	b.n	8002200 <vListInsert+0x2e>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	d2f6      	bcs.n	80021fa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6892      	ldr	r2, [r2, #8]
 800225a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6852      	ldr	r2, [r2, #4]
 8002264:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d103      	bne.n	8002278 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <xQueueGenericReset+0x2a>
        __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60bb      	str	r3, [r7, #8]
    }
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022c2:	f002 f857 	bl	8004374 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	441a      	add	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	3b01      	subs	r3, #1
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	441a      	add	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	22ff      	movs	r2, #255	; 0xff
 800230e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00f      	beq.n	8002340 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3310      	adds	r3, #16
 8002324:	4618      	mov	r0, r3
 8002326:	f001 f8b3 	bl	8003490 <xTaskRemoveFromEventList>
 800232a:	e009      	b.n	8002340 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3310      	adds	r3, #16
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fefd 	bl	8002130 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3324      	adds	r3, #36	; 0x24
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fef8 	bl	8002130 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002340:	f002 f848 	bl	80043d4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800234e:	b580      	push	{r7, lr}
 8002350:	b08c      	sub	sp, #48	; 0x30
 8002352:	af02      	add	r7, sp, #8
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	4613      	mov	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	61bb      	str	r3, [r7, #24]
    }
 8002374:	bf00      	nop
 8002376:	e7fe      	b.n	8002376 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <xQueueGenericCreate+0x48>
 8002388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	429a      	cmp	r2, r3
 8002394:	d101      	bne.n	800239a <xQueueGenericCreate+0x4c>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <xQueueGenericCreate+0x4e>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xQueueGenericCreate+0x68>
        __asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	617b      	str	r3, [r7, #20]
    }
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023bc:	d90a      	bls.n	80023d4 <xQueueGenericCreate+0x86>
        __asm volatile
 80023be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	613b      	str	r3, [r7, #16]
    }
 80023d0:	bf00      	nop
 80023d2:	e7fe      	b.n	80023d2 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	3350      	adds	r3, #80	; 0x50
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 f8f7 	bl	80045cc <pvPortMalloc>
 80023de:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3350      	adds	r3, #80	; 0x50
 80023ee:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f805 	bl	800240c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002402:	6a3b      	ldr	r3, [r7, #32]
    }
 8002404:	4618      	mov	r0, r3
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e002      	b.n	800242e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800243a:	2101      	movs	r1, #1
 800243c:	69b8      	ldr	r0, [r7, #24]
 800243e:	f7ff ff2b 	bl	8002298 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	2073      	movs	r0, #115	; 0x73
 8002452:	f003 ffdb 	bl	800640c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b090      	sub	sp, #64	; 0x40
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericSend+0x32>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <xQueueGenericSend+0x40>
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <xQueueGenericSend+0x44>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <xQueueGenericSend+0x46>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <xQueueGenericSend+0x60>
        __asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSend+0x6e>
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <xQueueGenericSend+0x72>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueGenericSend+0x74>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueGenericSend+0x8e>
        __asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	623b      	str	r3, [r7, #32]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ee:	f001 f969 	bl	80037c4 <xTaskGetSchedulerState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <xQueueGenericSend+0x9e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <xQueueGenericSend+0xa2>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericSend+0xa4>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueGenericSend+0xbe>
        __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	61fb      	str	r3, [r7, #28]
    }
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800251e:	f001 ff29 	bl	8004374 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <xQueueGenericSend+0xd4>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d11f      	bne.n	8002574 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fcf6 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	460b      	mov	r3, r1
 8002546:	4601      	mov	r1, r0
 8002548:	205a      	movs	r0, #90	; 0x5a
 800254a:	f003 ffd5 	bl	80064f8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002554:	f000 fa56 	bl	8002a04 <prvCopyDataToQueue>
 8002558:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	3324      	adds	r3, #36	; 0x24
 8002566:	4618      	mov	r0, r3
 8002568:	f000 ff92 	bl	8003490 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800256c:	f001 ff32 	bl	80043d4 <vPortExitCritical>
                return pdPASS;
 8002570:	2301      	movs	r3, #1
 8002572:	e07d      	b.n	8002670 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d110      	bne.n	800259c <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800257a:	f001 ff2b 	bl	80043d4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	4618      	mov	r0, r3
 8002582:	f004 fcd1 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	460b      	mov	r3, r1
 8002590:	4601      	mov	r1, r0
 8002592:	205a      	movs	r0, #90	; 0x5a
 8002594:	f003 ffb0 	bl	80064f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002598:	2300      	movs	r3, #0
 800259a:	e069      	b.n	8002670 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 ffd8 	bl	800355c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025b0:	f001 ff10 	bl	80043d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025b4:	f000 fd54 	bl	8003060 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025b8:	f001 fedc 	bl	8004374 <vPortEnterCritical>
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d103      	bne.n	80025d2 <xQueueGenericSend+0x172>
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d103      	bne.n	80025e8 <xQueueGenericSend+0x188>
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e8:	f001 fef4 	bl	80043d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ec:	1d3a      	adds	r2, r7, #4
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 ffc7 	bl	8003588 <xTaskCheckForTimeOut>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d124      	bne.n	800264a <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002602:	f000 faf7 	bl	8002bf4 <prvIsQueueFull>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d018      	beq.n	800263e <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	3310      	adds	r3, #16
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fee9 	bl	80033ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800261a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800261c:	f000 fa82 	bl	8002b24 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002620:	f000 fd2c 	bl	800307c <xTaskResumeAll>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f47f af79 	bne.w	800251e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <xQueueGenericSend+0x218>)
 800262e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	e76f      	b.n	800251e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800263e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002640:	f000 fa70 	bl	8002b24 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002644:	f000 fd1a 	bl	800307c <xTaskResumeAll>
 8002648:	e769      	b.n	800251e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264c:	f000 fa6a 	bl	8002b24 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002650:	f000 fd14 	bl	800307c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	4618      	mov	r0, r3
 8002658:	f004 fc66 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	460b      	mov	r3, r1
 8002666:	4601      	mov	r1, r0
 8002668:	205a      	movs	r0, #90	; 0x5a
 800266a:	f003 ff45 	bl	80064f8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800266e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002670:	4618      	mov	r0, r3
 8002672:	3738      	adds	r7, #56	; 0x38
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b090      	sub	sp, #64	; 0x40
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <xQueueGenericSendFromISR+0x3c>
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <xQueueGenericSendFromISR+0x40>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <xQueueGenericSendFromISR+0x42>
 80026bc:	2300      	movs	r3, #0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026d4:	bf00      	nop
 80026d6:	e7fe      	b.n	80026d6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d103      	bne.n	80026e6 <xQueueGenericSendFromISR+0x6a>
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <xQueueGenericSendFromISR+0x6e>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <xQueueGenericSendFromISR+0x70>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	623b      	str	r3, [r7, #32]
    }
 8002702:	bf00      	nop
 8002704:	e7fe      	b.n	8002704 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002706:	f001 ff21 	bl	800454c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800270a:	f3ef 8211 	mrs	r2, BASEPRI
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	61fa      	str	r2, [r7, #28]
 8002720:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002722:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <xQueueGenericSendFromISR+0xbc>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d148      	bne.n	80027ca <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fbec 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 8002750:	4601      	mov	r1, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	461a      	mov	r2, r3
 8002756:	2060      	movs	r0, #96	; 0x60
 8002758:	f003 fdfe 	bl	8006358 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002762:	f000 f94f 	bl	8002a04 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002766:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d112      	bne.n	8002796 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d025      	beq.n	80027c4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	3324      	adds	r3, #36	; 0x24
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fe87 	bl	8003490 <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01d      	beq.n	80027c4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01a      	beq.n	80027c4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e016      	b.n	80027c4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002796:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800279a:	2b7f      	cmp	r3, #127	; 0x7f
 800279c:	d10a      	bne.n	80027b4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	617b      	str	r3, [r7, #20]
    }
 80027b0:	bf00      	nop
 80027b2:	e7fe      	b.n	80027b2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027b8:	3301      	adds	r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	b25a      	sxtb	r2, r3
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027c4:	2301      	movs	r3, #1
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027c8:	e00b      	b.n	80027e2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 fbab 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 80027d2:	4601      	mov	r1, r0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	2060      	movs	r0, #96	; 0x60
 80027da:	f003 fdbd 	bl	8006358 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80027ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3740      	adds	r7, #64	; 0x40
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b08f      	sub	sp, #60	; 0x3c
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <xQueueReceive+0x30>
        __asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	623b      	str	r3, [r7, #32]
    }
 8002824:	bf00      	nop
 8002826:	e7fe      	b.n	8002826 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <xQueueReceive+0x3e>
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <xQueueReceive+0x42>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueReceive+0x44>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueReceive+0x5e>
        __asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	61fb      	str	r3, [r7, #28]
    }
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002856:	f000 ffb5 	bl	80037c4 <xTaskGetSchedulerState>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <xQueueReceive+0x6e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <xQueueReceive+0x72>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <xQueueReceive+0x74>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xQueueReceive+0x8e>
        __asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61bb      	str	r3, [r7, #24]
    }
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002886:	f001 fd75 	bl	8004374 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d024      	beq.n	80028e0 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289a:	f000 f91d 	bl	8002ad8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	4618      	mov	r0, r3
 80028a2:	f004 fb41 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 80028a6:	4604      	mov	r4, r0
 80028a8:	2000      	movs	r0, #0
 80028aa:	f004 fb3d 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2101      	movs	r1, #1
 80028b4:	9100      	str	r1, [sp, #0]
 80028b6:	4621      	mov	r1, r4
 80028b8:	205c      	movs	r0, #92	; 0x5c
 80028ba:	f003 fe1d 	bl	80064f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	3310      	adds	r3, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fddc 	bl	8003490 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028d8:	f001 fd7c 	bl	80043d4 <vPortExitCritical>
                return pdPASS;
 80028dc:	2301      	movs	r3, #1
 80028de:	e08a      	b.n	80029f6 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d113      	bne.n	800290e <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028e6:	f001 fd75 	bl	80043d4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 fb1b 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 80028f2:	4604      	mov	r4, r0
 80028f4:	2000      	movs	r0, #0
 80028f6:	f004 fb17 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 80028fa:	4602      	mov	r2, r0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2101      	movs	r1, #1
 8002900:	9100      	str	r1, [sp, #0]
 8002902:	4621      	mov	r1, r4
 8002904:	205c      	movs	r0, #92	; 0x5c
 8002906:	f003 fdf7 	bl	80064f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800290a:	2300      	movs	r3, #0
 800290c:	e073      	b.n	80029f6 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fe1f 	bl	800355c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002922:	f001 fd57 	bl	80043d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002926:	f000 fb9b 	bl	8003060 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800292a:	f001 fd23 	bl	8004374 <vPortEnterCritical>
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002934:	b25b      	sxtb	r3, r3
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d103      	bne.n	8002944 <xQueueReceive+0x14c>
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294a:	b25b      	sxtb	r3, r3
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d103      	bne.n	800295a <xQueueReceive+0x162>
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800295a:	f001 fd3b 	bl	80043d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800295e:	1d3a      	adds	r2, r7, #4
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fe0e 	bl	8003588 <xTaskCheckForTimeOut>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d124      	bne.n	80029bc <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002974:	f000 f928 	bl	8002bc8 <prvIsQueueEmpty>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	3324      	adds	r3, #36	; 0x24
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fd30 	bl	80033ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800298c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800298e:	f000 f8c9 	bl	8002b24 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002992:	f000 fb73 	bl	800307c <xTaskResumeAll>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f af74 	bne.w	8002886 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <xQueueReceive+0x208>)
 80029a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	e76a      	b.n	8002886 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f8b7 	bl	8002b24 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029b6:	f000 fb61 	bl	800307c <xTaskResumeAll>
 80029ba:	e764      	b.n	8002886 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029be:	f000 f8b1 	bl	8002b24 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029c2:	f000 fb5b 	bl	800307c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c8:	f000 f8fe 	bl	8002bc8 <prvIsQueueEmpty>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f43f af59 	beq.w	8002886 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 faa6 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 80029dc:	4604      	mov	r4, r0
 80029de:	2000      	movs	r0, #0
 80029e0:	f004 faa2 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2101      	movs	r1, #1
 80029ea:	9100      	str	r1, [sp, #0]
 80029ec:	4621      	mov	r1, r4
 80029ee:	205c      	movs	r0, #92	; 0x5c
 80029f0:	f003 fd82 	bl	80064f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029f4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3734      	adds	r7, #52	; 0x34
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d14d      	bne.n	8002ac6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fee6 	bl	8003800 <xTaskPriorityDisinherit>
 8002a34:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	e043      	b.n	8002ac6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d119      	bne.n	8002a78 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6858      	ldr	r0, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	f004 fc26 	bl	80072a0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d32b      	bcc.n	8002ac6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	e026      	b.n	8002ac6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68d8      	ldr	r0, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	461a      	mov	r2, r3
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	f004 fc0c 	bl	80072a0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	425b      	negs	r3, r3
 8002a92:	441a      	add	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d207      	bcs.n	8002ab4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	425b      	negs	r3, r3
 8002aae:	441a      	add	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d105      	bne.n	8002ac6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002ace:	697b      	ldr	r3, [r7, #20]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d018      	beq.n	8002b1c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d303      	bcc.n	8002b0c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68d9      	ldr	r1, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	461a      	mov	r2, r3
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	f004 fbc2 	bl	80072a0 <memcpy>
    }
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b2c:	f001 fc22 	bl	8004374 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b36:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b38:	e011      	b.n	8002b5e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d012      	beq.n	8002b68 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3324      	adds	r3, #36	; 0x24
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fca2 	bl	8003490 <xTaskRemoveFromEventList>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b52:	f000 fd7f 	bl	8003654 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	dce9      	bgt.n	8002b3a <prvUnlockQueue+0x16>
 8002b66:	e000      	b.n	8002b6a <prvUnlockQueue+0x46>
                        break;
 8002b68:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	22ff      	movs	r2, #255	; 0xff
 8002b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b72:	f001 fc2f 	bl	80043d4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b76:	f001 fbfd 	bl	8004374 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b80:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b82:	e011      	b.n	8002ba8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3310      	adds	r3, #16
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fc7d 	bl	8003490 <xTaskRemoveFromEventList>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b9c:	f000 fd5a 	bl	8003654 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ba0:	7bbb      	ldrb	r3, [r7, #14]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	dce9      	bgt.n	8002b84 <prvUnlockQueue+0x60>
 8002bb0:	e000      	b.n	8002bb4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bb2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	22ff      	movs	r2, #255	; 0xff
 8002bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002bbc:	f001 fc0a 	bl	80043d4 <vPortExitCritical>
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bd0:	f001 fbd0 	bl	8004374 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e001      	b.n	8002be6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002be6:	f001 fbf5 	bl	80043d4 <vPortExitCritical>

    return xReturn;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bfc:	f001 fbba 	bl	8004374 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d102      	bne.n	8002c12 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e001      	b.n	8002c16 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c16:	f001 fbdd 	bl	80043d4 <vPortExitCritical>

    return xReturn;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e01e      	b.n	8002c72 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <vQueueAddToRegistry+0x60>)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d115      	bne.n	8002c6c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c40:	4910      	ldr	r1, [pc, #64]	; (8002c84 <vQueueAddToRegistry+0x60>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <vQueueAddToRegistry+0x60>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 f965 	bl	8006f28 <SEGGER_SYSVIEW_ShrinkId>
 8002c5e:	4601      	mov	r1, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	2071      	movs	r0, #113	; 0x71
 8002c66:	f003 fb77 	bl	8006358 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c6a:	e006      	b.n	8002c7a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b07      	cmp	r3, #7
 8002c76:	d9dd      	bls.n	8002c34 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200143c4 	.word	0x200143c4

08002c88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c98:	f001 fb6c 	bl	8004374 <vPortEnterCritical>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d103      	bne.n	8002cb2 <vQueueWaitForMessageRestricted+0x2a>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d103      	bne.n	8002cc8 <vQueueWaitForMessageRestricted+0x40>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cc8:	f001 fb84 	bl	80043d4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3324      	adds	r3, #36	; 0x24
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fba9 	bl	8003434 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff1e 	bl	8002b24 <prvUnlockQueue>
    }
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fc61 	bl	80045cc <pvPortMalloc>
 8002d0a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00e      	beq.n	8002d30 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d12:	2058      	movs	r0, #88	; 0x58
 8002d14:	f001 fc5a 	bl	80045cc <pvPortMalloc>
 8002d18:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
 8002d26:	e005      	b.n	8002d34 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d28:	6978      	ldr	r0, [r7, #20]
 8002d2a:	f001 fd2f 	bl	800478c <vPortFree>
 8002d2e:	e001      	b.n	8002d34 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d013      	beq.n	8002d62 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9303      	str	r3, [sp, #12]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f80e 	bl	8002d72 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d56:	69f8      	ldr	r0, [r7, #28]
 8002d58:	f000 f8a2 	bl	8002ea0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e002      	b.n	8002d68 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d68:	69bb      	ldr	r3, [r7, #24]
    }
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b088      	sub	sp, #32
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	21a5      	movs	r1, #165	; 0xa5
 8002d8c:	f004 fa96 	bl	80072bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f023 0307 	bic.w	r3, r3, #7
 8002da8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <prvInitialiseNewTask+0x58>
        __asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	617b      	str	r3, [r7, #20]
    }
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01f      	beq.n	8002e10 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	e012      	b.n	8002dfc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	7819      	ldrb	r1, [r3, #0]
 8002dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	3334      	adds	r3, #52	; 0x34
 8002de6:	460a      	mov	r2, r1
 8002de8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b09      	cmp	r3, #9
 8002e00:	d9e9      	bls.n	8002dd6 <prvInitialiseNewTask+0x64>
 8002e02:	e000      	b.n	8002e06 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e04:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e0e:	e003      	b.n	8002e18 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d901      	bls.n	8002e22 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e1e:	2304      	movs	r3, #4
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	2200      	movs	r2, #0
 8002e32:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	3304      	adds	r3, #4
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f999 	bl	8002170 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	3318      	adds	r3, #24
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f994 	bl	8002170 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	f1c3 0205 	rsb	r2, r3, #5
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	3350      	adds	r3, #80	; 0x50
 8002e62:	2204      	movs	r2, #4
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fa28 	bl	80072bc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	3354      	adds	r3, #84	; 0x54
 8002e70:	2201      	movs	r2, #1
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fa21 	bl	80072bc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	68f9      	ldr	r1, [r7, #12]
 8002e7e:	69b8      	ldr	r0, [r7, #24]
 8002e80:	f001 f8c8 	bl	8004014 <pxPortInitialiseStack>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e94:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ea8:	f001 fa64 	bl	8004374 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <prvAddNewTaskToReadyList+0xe4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <prvAddNewTaskToReadyList+0xe4>)
 8002eb4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <prvAddNewTaskToReadyList+0xe8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ebe:	4a32      	ldr	r2, [pc, #200]	; (8002f88 <prvAddNewTaskToReadyList+0xe8>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <prvAddNewTaskToReadyList+0xe4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d110      	bne.n	8002eee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ecc:	f000 fbe0 	bl	8003690 <prvInitialiseTaskLists>
 8002ed0:	e00d      	b.n	8002eee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <prvAddNewTaskToReadyList+0xec>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eda:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <prvAddNewTaskToReadyList+0xe8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d802      	bhi.n	8002eee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <prvAddNewTaskToReadyList+0xe8>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002eee:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <prvAddNewTaskToReadyList+0xf0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <prvAddNewTaskToReadyList+0xf0>)
 8002ef6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <prvAddNewTaskToReadyList+0xf0>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <prvAddNewTaskToReadyList+0x94>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fee7 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskCreate>
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	461d      	mov	r5, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461c      	mov	r4, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	1ae3      	subs	r3, r4, r3
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	462b      	mov	r3, r5
 8002f30:	f001 fdf2 	bl	8004b18 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 ff54 	bl	8006de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <prvAddNewTaskToReadyList+0xf4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <prvAddNewTaskToReadyList+0xf4>)
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <prvAddNewTaskToReadyList+0xf8>)
 8002f5c:	441a      	add	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f7ff f910 	bl	800218a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f6a:	f001 fa33 	bl	80043d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <prvAddNewTaskToReadyList+0xec>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <prvAddNewTaskToReadyList+0xe8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bdb0      	pop	{r4, r5, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000110 	.word	0x20000110
 8002f88:	20000038 	.word	0x20000038
 8002f8c:	2000011c 	.word	0x2000011c
 8002f90:	2000012c 	.word	0x2000012c
 8002f94:	20000118 	.word	0x20000118
 8002f98:	2000003c 	.word	0x2000003c

08002f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002fa2:	4b27      	ldr	r3, [pc, #156]	; (8003040 <vTaskStartScheduler+0xa4>)
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2300      	movs	r3, #0
 8002fac:	2282      	movs	r2, #130	; 0x82
 8002fae:	4925      	ldr	r1, [pc, #148]	; (8003044 <vTaskStartScheduler+0xa8>)
 8002fb0:	4825      	ldr	r0, [pc, #148]	; (8003048 <vTaskStartScheduler+0xac>)
 8002fb2:	f7ff fe9d 	bl	8002cf0 <xTaskCreate>
 8002fb6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002fbe:	f000 fd17 	bl	80039f0 <xTimerCreateTimerTask>
 8002fc2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d124      	bne.n	8003014 <vTaskStartScheduler+0x78>
        __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60bb      	str	r3, [r7, #8]
    }
 8002fdc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <vTaskStartScheduler+0xb0>)
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <vTaskStartScheduler+0xb4>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <vTaskStartScheduler+0xb8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <vTaskStartScheduler+0xbc>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <vTaskStartScheduler+0xa4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d102      	bne.n	8003004 <vTaskStartScheduler+0x68>
 8002ffe:	f003 fe51 	bl	8006ca4 <SEGGER_SYSVIEW_OnIdle>
 8003002:	e004      	b.n	800300e <vTaskStartScheduler+0x72>
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <vTaskStartScheduler+0xbc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fea9 	bl	8006d60 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800300e:	f001 f891 	bl	8004134 <xPortStartScheduler>
 8003012:	e00e      	b.n	8003032 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d10a      	bne.n	8003032 <vTaskStartScheduler+0x96>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	607b      	str	r3, [r7, #4]
    }
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <vTaskStartScheduler+0xc0>)
 8003034:	681b      	ldr	r3, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000134 	.word	0x20000134
 8003044:	08007340 	.word	0x08007340
 8003048:	0800366d 	.word	0x0800366d
 800304c:	20000130 	.word	0x20000130
 8003050:	2000011c 	.word	0x2000011c
 8003054:	20000114 	.word	0x20000114
 8003058:	20000038 	.word	0x20000038
 800305c:	2000000c 	.word	0x2000000c

08003060 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <vTaskSuspendAll+0x18>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	4a03      	ldr	r2, [pc, #12]	; (8003078 <vTaskSuspendAll+0x18>)
 800306c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	20000138 	.word	0x20000138

0800307c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <xTaskResumeAll+0x104>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	603b      	str	r3, [r7, #0]
    }
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030a8:	f001 f964 	bl	8004374 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030ac:	4b34      	ldr	r3, [pc, #208]	; (8003180 <xTaskResumeAll+0x104>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	4a33      	ldr	r2, [pc, #204]	; (8003180 <xTaskResumeAll+0x104>)
 80030b4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b6:	4b32      	ldr	r3, [pc, #200]	; (8003180 <xTaskResumeAll+0x104>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d159      	bne.n	8003172 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <xTaskResumeAll+0x108>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d055      	beq.n	8003172 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030c6:	e032      	b.n	800312e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <xTaskResumeAll+0x10c>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3318      	adds	r3, #24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f8b5 	bl	8002244 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3304      	adds	r3, #4
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f8b0 	bl	8002244 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fe7c 	bl	8006de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <xTaskResumeAll+0x110>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	4a24      	ldr	r2, [pc, #144]	; (800318c <xTaskResumeAll+0x110>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4a21      	ldr	r2, [pc, #132]	; (8003190 <xTaskResumeAll+0x114>)
 800310c:	441a      	add	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f7ff f838 	bl	800218a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <xTaskResumeAll+0x118>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	429a      	cmp	r2, r3
 8003126:	d302      	bcc.n	800312e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <xTaskResumeAll+0x11c>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <xTaskResumeAll+0x10c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1c8      	bne.n	80030c8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800313c:	f000 fb26 	bl	800378c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <xTaskResumeAll+0x120>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800314c:	f000 f84a 	bl	80031e4 <xTaskIncrementTick>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <xTaskResumeAll+0x11c>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f1      	bne.n	800314c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <xTaskResumeAll+0x120>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <xTaskResumeAll+0x11c>)
 8003170:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003172:	f001 f92f 	bl	80043d4 <vPortExitCritical>

    return xAlreadyYielded;
 8003176:	687b      	ldr	r3, [r7, #4]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000138 	.word	0x20000138
 8003184:	20000110 	.word	0x20000110
 8003188:	200000d0 	.word	0x200000d0
 800318c:	20000118 	.word	0x20000118
 8003190:	2000003c 	.word	0x2000003c
 8003194:	20000038 	.word	0x20000038
 8003198:	20000124 	.word	0x20000124
 800319c:	20000120 	.word	0x20000120

080031a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <xTaskGetTickCount+0x1c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000114 	.word	0x20000114

080031c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031c6:	f001 f9c1 	bl	800454c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <xTaskGetTickCountFromISR+0x20>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031d4:	683b      	ldr	r3, [r7, #0]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000114 	.word	0x20000114

080031e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <xTaskIncrementTick+0x110>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d173      	bne.n	80032de <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031f6:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <xTaskIncrementTick+0x114>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031fe:	4a3e      	ldr	r2, [pc, #248]	; (80032f8 <xTaskIncrementTick+0x114>)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d120      	bne.n	800324c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800320a:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <xTaskIncrementTick+0x118>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <xTaskIncrementTick+0x46>
        __asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	603b      	str	r3, [r7, #0]
    }
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xTaskIncrementTick+0x44>
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <xTaskIncrementTick+0x118>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	4b33      	ldr	r3, [pc, #204]	; (8003300 <xTaskIncrementTick+0x11c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a31      	ldr	r2, [pc, #196]	; (80032fc <xTaskIncrementTick+0x118>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4a31      	ldr	r2, [pc, #196]	; (8003300 <xTaskIncrementTick+0x11c>)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <xTaskIncrementTick+0x120>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <xTaskIncrementTick+0x120>)
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	f000 faa0 	bl	800378c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800324c:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <xTaskIncrementTick+0x124>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	429a      	cmp	r2, r3
 8003254:	d348      	bcc.n	80032e8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <xTaskIncrementTick+0x118>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <xTaskIncrementTick+0x124>)
 8003262:	f04f 32ff 	mov.w	r2, #4294967295
 8003266:	601a      	str	r2, [r3, #0]
                    break;
 8003268:	e03e      	b.n	80032e8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <xTaskIncrementTick+0x118>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d203      	bcs.n	800328a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <xTaskIncrementTick+0x124>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003288:	e02e      	b.n	80032e8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe ffd8 	bl	8002244 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	3318      	adds	r3, #24
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe ffcf 	bl	8002244 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f003 fd9b 	bl	8006de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	2201      	movs	r2, #1
 80032b4:	409a      	lsls	r2, r3
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <xTaskIncrementTick+0x128>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	4a13      	ldr	r2, [pc, #76]	; (800330c <xTaskIncrementTick+0x128>)
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4a10      	ldr	r2, [pc, #64]	; (8003310 <xTaskIncrementTick+0x12c>)
 80032ce:	441a      	add	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7fe ff57 	bl	800218a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032dc:	e7bb      	b.n	8003256 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <xTaskIncrementTick+0x130>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <xTaskIncrementTick+0x130>)
 80032e6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032e8:	697b      	ldr	r3, [r7, #20]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000138 	.word	0x20000138
 80032f8:	20000114 	.word	0x20000114
 80032fc:	200000c8 	.word	0x200000c8
 8003300:	200000cc 	.word	0x200000cc
 8003304:	20000128 	.word	0x20000128
 8003308:	20000130 	.word	0x20000130
 800330c:	20000118 	.word	0x20000118
 8003310:	2000003c 	.word	0x2000003c
 8003314:	20000120 	.word	0x20000120

08003318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <vTaskSwitchContext+0xbc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <vTaskSwitchContext+0xc0>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800332c:	e04d      	b.n	80033ca <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <vTaskSwitchContext+0xc0>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003334:	4b29      	ldr	r3, [pc, #164]	; (80033dc <vTaskSwitchContext+0xc4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	f1c3 031f 	rsb	r3, r3, #31
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	4925      	ldr	r1, [pc, #148]	; (80033e0 <vTaskSwitchContext+0xc8>)
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <vTaskSwitchContext+0x5c>
        __asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
    }
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <vTaskSwitchContext+0x5a>
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <vTaskSwitchContext+0xc8>)
 8003380:	4413      	add	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	3308      	adds	r3, #8
 8003396:	429a      	cmp	r2, r3
 8003398:	d104      	bne.n	80033a4 <vTaskSwitchContext+0x8c>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <vTaskSwitchContext+0xcc>)
 80033ac:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <vTaskSwitchContext+0xcc>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <vTaskSwitchContext+0xd0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d102      	bne.n	80033c0 <vTaskSwitchContext+0xa8>
 80033ba:	f003 fc73 	bl	8006ca4 <SEGGER_SYSVIEW_OnIdle>
}
 80033be:	e004      	b.n	80033ca <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <vTaskSwitchContext+0xcc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fccb 	bl	8006d60 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000138 	.word	0x20000138
 80033d8:	20000124 	.word	0x20000124
 80033dc:	20000118 	.word	0x20000118
 80033e0:	2000003c 	.word	0x2000003c
 80033e4:	20000038 	.word	0x20000038
 80033e8:	20000134 	.word	0x20000134

080033ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	60fb      	str	r3, [r7, #12]
    }
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003412:	4b07      	ldr	r3, [pc, #28]	; (8003430 <vTaskPlaceOnEventList+0x44>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3318      	adds	r3, #24
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe fed9 	bl	80021d2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003420:	2101      	movs	r1, #1
 8003422:	6838      	ldr	r0, [r7, #0]
 8003424:	f000 fa6c 	bl	8003900 <prvAddCurrentTaskToDelayedList>
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000038 	.word	0x20000038

08003434 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	617b      	str	r3, [r7, #20]
    }
 8003458:	bf00      	nop
 800345a:	e7fe      	b.n	800345a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <vTaskPlaceOnEventListRestricted+0x58>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3318      	adds	r3, #24
 8003462:	4619      	mov	r1, r3
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7fe fe90 	bl	800218a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
 8003474:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003476:	2024      	movs	r0, #36	; 0x24
 8003478:	f002 ff14 	bl	80062a4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f000 fa3e 	bl	8003900 <prvAddCurrentTaskToDelayedList>
    }
 8003484:	bf00      	nop
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000038 	.word	0x20000038

08003490 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	60fb      	str	r3, [r7, #12]
    }
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3318      	adds	r3, #24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe febf 	bl	8002244 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <xTaskRemoveFromEventList+0xb4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d120      	bne.n	8003510 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe feb6 	bl	8002244 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fc82 	bl	8006de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	2201      	movs	r2, #1
 80034e6:	409a      	lsls	r2, r3
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <xTaskRemoveFromEventList+0xb8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <xTaskRemoveFromEventList+0xb8>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4a13      	ldr	r2, [pc, #76]	; (800354c <xTaskRemoveFromEventList+0xbc>)
 8003500:	441a      	add	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f7fe fe3e 	bl	800218a <vListInsertEnd>
 800350e:	e005      	b.n	800351c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	3318      	adds	r3, #24
 8003514:	4619      	mov	r1, r3
 8003516:	480e      	ldr	r0, [pc, #56]	; (8003550 <xTaskRemoveFromEventList+0xc0>)
 8003518:	f7fe fe37 	bl	800218a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <xTaskRemoveFromEventList+0xc4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	429a      	cmp	r2, r3
 8003528:	d905      	bls.n	8003536 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <xTaskRemoveFromEventList+0xc8>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e001      	b.n	800353a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800353a:	697b      	ldr	r3, [r7, #20]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000138 	.word	0x20000138
 8003548:	20000118 	.word	0x20000118
 800354c:	2000003c 	.word	0x2000003c
 8003550:	200000d0 	.word	0x200000d0
 8003554:	20000038 	.word	0x20000038
 8003558:	20000124 	.word	0x20000124

0800355c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <vTaskInternalSetTimeOutState+0x24>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <vTaskInternalSetTimeOutState+0x28>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	20000128 	.word	0x20000128
 8003584:	20000114 	.word	0x20000114

08003588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	613b      	str	r3, [r7, #16]
    }
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60fb      	str	r3, [r7, #12]
    }
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035ca:	f000 fed3 	bl	8004374 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <xTaskCheckForTimeOut+0xc4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d102      	bne.n	80035ee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e026      	b.n	800363c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <xTaskCheckForTimeOut+0xc8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d00a      	beq.n	8003610 <xTaskCheckForTimeOut+0x88>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	429a      	cmp	r2, r3
 8003602:	d305      	bcc.n	8003610 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e015      	b.n	800363c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20b      	bcs.n	8003632 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	1ad2      	subs	r2, r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff98 	bl	800355c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e004      	b.n	800363c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003638:	2301      	movs	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800363c:	f000 feca 	bl	80043d4 <vPortExitCritical>

    return xReturn;
 8003640:	69fb      	ldr	r3, [r7, #28]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000114 	.word	0x20000114
 8003650:	20000128 	.word	0x20000128

08003654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <vTaskMissedYield+0x14>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	20000124 	.word	0x20000124

0800366c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003674:	f000 f84c 	bl	8003710 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <prvIdleTask+0x20>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003688:	e7f4      	b.n	8003674 <prvIdleTask+0x8>
 800368a:	bf00      	nop
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	e00c      	b.n	80036b6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <prvInitialiseTaskLists+0x60>)
 80036a8:	4413      	add	r3, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fd40 	bl	8002130 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3301      	adds	r3, #1
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d9ef      	bls.n	800369c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036bc:	480d      	ldr	r0, [pc, #52]	; (80036f4 <prvInitialiseTaskLists+0x64>)
 80036be:	f7fe fd37 	bl	8002130 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036c2:	480d      	ldr	r0, [pc, #52]	; (80036f8 <prvInitialiseTaskLists+0x68>)
 80036c4:	f7fe fd34 	bl	8002130 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036c8:	480c      	ldr	r0, [pc, #48]	; (80036fc <prvInitialiseTaskLists+0x6c>)
 80036ca:	f7fe fd31 	bl	8002130 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036ce:	480c      	ldr	r0, [pc, #48]	; (8003700 <prvInitialiseTaskLists+0x70>)
 80036d0:	f7fe fd2e 	bl	8002130 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036d4:	480b      	ldr	r0, [pc, #44]	; (8003704 <prvInitialiseTaskLists+0x74>)
 80036d6:	f7fe fd2b 	bl	8002130 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <prvInitialiseTaskLists+0x78>)
 80036dc:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <prvInitialiseTaskLists+0x64>)
 80036de:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <prvInitialiseTaskLists+0x7c>)
 80036e2:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <prvInitialiseTaskLists+0x68>)
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000003c 	.word	0x2000003c
 80036f4:	200000a0 	.word	0x200000a0
 80036f8:	200000b4 	.word	0x200000b4
 80036fc:	200000d0 	.word	0x200000d0
 8003700:	200000e4 	.word	0x200000e4
 8003704:	200000fc 	.word	0x200000fc
 8003708:	200000c8 	.word	0x200000c8
 800370c:	200000cc 	.word	0x200000cc

08003710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003716:	e019      	b.n	800374c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003718:	f000 fe2c 	bl	8004374 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <prvCheckTasksWaitingTermination+0x50>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fd8b 	bl	8002244 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <prvCheckTasksWaitingTermination+0x54>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <prvCheckTasksWaitingTermination+0x54>)
 8003736:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <prvCheckTasksWaitingTermination+0x58>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3b01      	subs	r3, #1
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <prvCheckTasksWaitingTermination+0x58>)
 8003740:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003742:	f000 fe47 	bl	80043d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f810 	bl	800376c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <prvCheckTasksWaitingTermination+0x58>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e1      	bne.n	8003718 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200000e4 	.word	0x200000e4
 8003764:	20000110 	.word	0x20000110
 8003768:	200000f8 	.word	0x200000f8

0800376c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4618      	mov	r0, r3
 800377a:	f001 f807 	bl	800478c <vPortFree>
                vPortFree( pxTCB );
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 f804 	bl	800478c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <prvResetNextTaskUnblockTime+0x30>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <prvResetNextTaskUnblockTime+0x34>)
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037a2:	e005      	b.n	80037b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <prvResetNextTaskUnblockTime+0x30>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <prvResetNextTaskUnblockTime+0x34>)
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200000c8 	.word	0x200000c8
 80037c0:	20000130 	.word	0x20000130

080037c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <xTaskGetSchedulerState+0x34>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037d2:	2301      	movs	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	e008      	b.n	80037ea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <xTaskGetSchedulerState+0x38>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037e0:	2302      	movs	r3, #2
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	e001      	b.n	80037ea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037ea:	687b      	ldr	r3, [r7, #4]
    }
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	2000011c 	.word	0x2000011c
 80037fc:	20000138 	.word	0x20000138

08003800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d068      	beq.n	80038e8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <xTaskPriorityDisinherit+0xf4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	429a      	cmp	r2, r3
 800381e:	d00a      	beq.n	8003836 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	60fb      	str	r3, [r7, #12]
    }
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	60bb      	str	r3, [r7, #8]
    }
 8003850:	bf00      	nop
 8003852:	e7fe      	b.n	8003852 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003858:	1e5a      	subs	r2, r3, #1
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	429a      	cmp	r2, r3
 8003868:	d03e      	beq.n	80038e8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d13a      	bne.n	80038e8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3304      	adds	r3, #4
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fce4 	bl	8002244 <uxListRemove>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	2201      	movs	r2, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43da      	mvns	r2, r3
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <xTaskPriorityDisinherit+0xf8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4013      	ands	r3, r2
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <xTaskPriorityDisinherit+0xf8>)
 8003896:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4619      	mov	r1, r3
 800389c:	204a      	movs	r0, #74	; 0x4a
 800389e:	f002 fd1f 	bl	80062e0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f1c3 0205 	rsb	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	2201      	movs	r2, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <xTaskPriorityDisinherit+0xf8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <xTaskPriorityDisinherit+0xf8>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <xTaskPriorityDisinherit+0xfc>)
 80038d6:	441a      	add	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7fe fc53 	bl	800218a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038e8:	697b      	ldr	r3, [r7, #20]
    }
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000038 	.word	0x20000038
 80038f8:	20000118 	.word	0x20000118
 80038fc:	2000003c 	.word	0x2000003c

08003900 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800390a:	4b32      	ldr	r3, [pc, #200]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3304      	adds	r3, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fc94 	bl	8002244 <uxListRemove>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2201      	movs	r2, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4013      	ands	r3, r2
 8003936:	4a29      	ldr	r2, [pc, #164]	; (80039dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003938:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d110      	bne.n	8003964 <prvAddCurrentTaskToDelayedList+0x64>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	211b      	movs	r1, #27
 800394e:	4618      	mov	r0, r3
 8003950:	f003 fa8a 	bl	8006e68 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3304      	adds	r3, #4
 800395a:	4619      	mov	r1, r3
 800395c:	4820      	ldr	r0, [pc, #128]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800395e:	f7fe fc14 	bl	800218a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003962:	e032      	b.n	80039ca <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	d20f      	bcs.n	800399c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800397c:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2104      	movs	r1, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f003 fa70 	bl	8006e68 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003988:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe fc1c 	bl	80021d2 <vListInsert>
}
 800399a:	e016      	b.n	80039ca <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2104      	movs	r1, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 fa60 	bl	8006e68 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe fc0c 	bl	80021d2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <prvAddCurrentTaskToDelayedList+0xec>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d202      	bcs.n	80039ca <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039c4:	4a09      	ldr	r2, [pc, #36]	; (80039ec <prvAddCurrentTaskToDelayedList+0xec>)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6013      	str	r3, [r2, #0]
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000114 	.word	0x20000114
 80039d8:	20000038 	.word	0x20000038
 80039dc:	20000118 	.word	0x20000118
 80039e0:	200000fc 	.word	0x200000fc
 80039e4:	200000cc 	.word	0x200000cc
 80039e8:	200000c8 	.word	0x200000c8
 80039ec:	20000130 	.word	0x20000130

080039f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039fa:	f000 fad5 	bl	8003fa8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <xTimerCreateTimerTask+0x54>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <xTimerCreateTimerTask+0x58>)
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a14:	490d      	ldr	r1, [pc, #52]	; (8003a4c <xTimerCreateTimerTask+0x5c>)
 8003a16:	480e      	ldr	r0, [pc, #56]	; (8003a50 <xTimerCreateTimerTask+0x60>)
 8003a18:	f7ff f96a 	bl	8002cf0 <xTaskCreate>
 8003a1c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	603b      	str	r3, [r7, #0]
    }
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a3a:	687b      	ldr	r3, [r7, #4]
    }
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000016c 	.word	0x2000016c
 8003a48:	20000170 	.word	0x20000170
 8003a4c:	08007348 	.word	0x08007348
 8003a50:	08003b89 	.word	0x08003b89

08003a54 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	623b      	str	r3, [r7, #32]
    }
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <xTimerGenericCommand+0x98>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02a      	beq.n	8003ae0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	dc18      	bgt.n	8003ace <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a9c:	f7ff fe92 	bl	80037c4 <xTaskGetSchedulerState>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d109      	bne.n	8003aba <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <xTimerGenericCommand+0x98>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0114 	add.w	r1, r7, #20
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab2:	f7fe fcd5 	bl	8002460 <xQueueGenericSend>
 8003ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ab8:	e012      	b.n	8003ae0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <xTimerGenericCommand+0x98>)
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f107 0114 	add.w	r1, r7, #20
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f7fe fccb 	bl	8002460 <xQueueGenericSend>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24
 8003acc:	e008      	b.n	8003ae0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <xTimerGenericCommand+0x98>)
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f107 0114 	add.w	r1, r7, #20
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	f7fe fdcf 	bl	800267c <xQueueGenericSendFromISR>
 8003ade:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3728      	adds	r7, #40	; 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000016c 	.word	0x2000016c

08003af0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <prvProcessExpiredTimer+0x94>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fb9b 	bl	8002244 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	18d1      	adds	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f000 f8d1 	bl	8003cd0 <prvInsertTimerInActiveList>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01f      	beq.n	8003b74 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b34:	2300      	movs	r3, #0
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff88 	bl	8003a54 <xTimerGenericCommand>
 8003b44:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d113      	bne.n	8003b74 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	60fb      	str	r3, [r7, #12]
    }
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	6978      	ldr	r0, [r7, #20]
 8003b7a:	4798      	blx	r3
    }
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000164 	.word	0x20000164

08003b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b90:	f107 0308 	add.w	r3, r7, #8
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f857 	bl	8003c48 <prvGetNextExpireTime>
 8003b9a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f803 	bl	8003bac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ba6:	f000 f8d5 	bl	8003d54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003baa:	e7f1      	b.n	8003b90 <prvTimerTask+0x8>

08003bac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003bb6:	f7ff fa53 	bl	8003060 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f866 	bl	8003c90 <prvSampleTimeNow>
 8003bc4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d130      	bne.n	8003c2e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <prvProcessTimerOrBlockTask+0x3c>
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d806      	bhi.n	8003be8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bda:	f7ff fa4f 	bl	800307c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff85 	bl	8003af0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003be6:	e024      	b.n	8003c32 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <prvProcessTimerOrBlockTask+0x90>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <prvProcessTimerOrBlockTask+0x50>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <prvProcessTimerOrBlockTask+0x52>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <prvProcessTimerOrBlockTask+0x94>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7ff f83b 	bl	8002c88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c12:	f7ff fa33 	bl	800307c <xTaskResumeAll>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <prvProcessTimerOrBlockTask+0x98>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
    }
 8003c2c:	e001      	b.n	8003c32 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c2e:	f7ff fa25 	bl	800307c <xTaskResumeAll>
    }
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000168 	.word	0x20000168
 8003c40:	2000016c 	.word	0x2000016c
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <prvGetNextExpireTime+0x44>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <prvGetNextExpireTime+0x16>
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	e000      	b.n	8003c60 <prvGetNextExpireTime+0x18>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <prvGetNextExpireTime+0x44>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e001      	b.n	8003c7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000164 	.word	0x20000164

08003c90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c98:	f7ff fa82 	bl	80031a0 <xTaskGetTickCount>
 8003c9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <prvSampleTimeNow+0x3c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d205      	bcs.n	8003cb4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ca8:	f000 f91a 	bl	8003ee0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <prvSampleTimeNow+0x3c>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
    }
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000174 	.word	0x20000174

08003cd0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d812      	bhi.n	8003d1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e01b      	b.n	8003d42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <prvInsertTimerInActiveList+0x7c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7fe fa5c 	bl	80021d2 <vListInsert>
 8003d1a:	e012      	b.n	8003d42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d206      	bcs.n	8003d32 <prvInsertTimerInActiveList+0x62>
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e007      	b.n	8003d42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <prvInsertTimerInActiveList+0x80>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f7fe fa48 	bl	80021d2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d42:	697b      	ldr	r3, [r7, #20]
    }
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000168 	.word	0x20000168
 8003d50:	20000164 	.word	0x20000164

08003d54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	; 0x30
 8003d58:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d5a:	e0ae      	b.n	8003eba <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f2c0 80aa 	blt.w	8003eb8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	3304      	adds	r3, #4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe fa65 	bl	8002244 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff87 	bl	8003c90 <prvSampleTimeNow>
 8003d82:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b09      	cmp	r3, #9
 8003d88:	f200 8097 	bhi.w	8003eba <prvProcessReceivedCommands+0x166>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <prvProcessReceivedCommands+0x40>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dbd 	.word	0x08003dbd
 8003da0:	08003e31 	.word	0x08003e31
 8003da4:	08003e45 	.word	0x08003e45
 8003da8:	08003e8f 	.word	0x08003e8f
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dbd 	.word	0x08003dbd
 8003db4:	08003e31 	.word	0x08003e31
 8003db8:	08003e45 	.word	0x08003e45
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	18d1      	adds	r1, r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ddc:	f7ff ff78 	bl	8003cd0 <prvInsertTimerInActiveList>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d069      	beq.n	8003eba <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dec:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d05e      	beq.n	8003eba <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	441a      	add	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e0e:	f7ff fe21 	bl	8003a54 <xTimerGenericCommand>
 8003e12:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d14f      	bne.n	8003eba <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	61bb      	str	r3, [r7, #24]
    }
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e42:	e03a      	b.n	8003eba <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	617b      	str	r3, [r7, #20]
    }
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	18d1      	adds	r1, r2, r3
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e88:	f7ff ff22 	bl	8003cd0 <prvInsertTimerInActiveList>
                        break;
 8003e8c:	e015      	b.n	8003eba <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e9e:	f000 fc75 	bl	800478c <vPortFree>
 8003ea2:	e00a      	b.n	8003eba <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003eb6:	e000      	b.n	8003eba <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003eb8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <prvProcessReceivedCommands+0x188>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f107 0108 	add.w	r1, r7, #8
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe fc97 	bl	80027f8 <xQueueReceive>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f47f af45 	bne.w	8003d5c <prvProcessReceivedCommands+0x8>
        }
    }
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	3728      	adds	r7, #40	; 0x28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	2000016c 	.word	0x2000016c

08003ee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ee6:	e048      	b.n	8003f7a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ee8:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <prvSwitchTimerLists+0xc0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <prvSwitchTimerLists+0xc0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe f99f 	bl	8002244 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02e      	beq.n	8003f7a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d90e      	bls.n	8003f4c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <prvSwitchTimerLists+0xc0>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7fe f944 	bl	80021d2 <vListInsert>
 8003f4a:	e016      	b.n	8003f7a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2300      	movs	r3, #0
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	2100      	movs	r1, #0
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fd7c 	bl	8003a54 <xTimerGenericCommand>
 8003f5c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	603b      	str	r3, [r7, #0]
    }
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <prvSwitchTimerLists+0xc0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1b1      	bne.n	8003ee8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <prvSwitchTimerLists+0xc0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <prvSwitchTimerLists+0xc4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <prvSwitchTimerLists+0xc0>)
 8003f90:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <prvSwitchTimerLists+0xc4>)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	6013      	str	r3, [r2, #0]
    }
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000164 	.word	0x20000164
 8003fa4:	20000168 	.word	0x20000168

08003fa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fac:	f000 f9e2 	bl	8004374 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <prvCheckForValidListAndQueue+0x54>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d11d      	bne.n	8003ff4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fb8:	4811      	ldr	r0, [pc, #68]	; (8004000 <prvCheckForValidListAndQueue+0x58>)
 8003fba:	f7fe f8b9 	bl	8002130 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fbe:	4811      	ldr	r0, [pc, #68]	; (8004004 <prvCheckForValidListAndQueue+0x5c>)
 8003fc0:	f7fe f8b6 	bl	8002130 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <prvCheckForValidListAndQueue+0x60>)
 8003fc6:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <prvCheckForValidListAndQueue+0x58>)
 8003fc8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <prvCheckForValidListAndQueue+0x64>)
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <prvCheckForValidListAndQueue+0x5c>)
 8003fce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	210c      	movs	r1, #12
 8003fd4:	200a      	movs	r0, #10
 8003fd6:	f7fe f9ba 	bl	800234e <xQueueGenericCreate>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <prvCheckForValidListAndQueue+0x54>)
 8003fde:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <prvCheckForValidListAndQueue+0x54>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <prvCheckForValidListAndQueue+0x54>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4908      	ldr	r1, [pc, #32]	; (8004010 <prvCheckForValidListAndQueue+0x68>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fe18 	bl	8002c24 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ff4:	f000 f9ee 	bl	80043d4 <vPortExitCritical>
    }
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2000016c 	.word	0x2000016c
 8004000:	2000013c 	.word	0x2000013c
 8004004:	20000150 	.word	0x20000150
 8004008:	20000164 	.word	0x20000164
 800400c:	20000168 	.word	0x20000168
 8004010:	08007350 	.word	0x08007350

08004014 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3b04      	subs	r3, #4
 8004024:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800402c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b04      	subs	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004044:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <pxPortInitialiseStack+0x64>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b14      	subs	r3, #20
 800404e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f06f 0202 	mvn.w	r2, #2
 8004062:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b20      	subs	r3, #32
 8004068:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800406a:	68fb      	ldr	r3, [r7, #12]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	0800407d 	.word	0x0800407d

0800407c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <prvTaskExitError+0x54>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d00a      	beq.n	80040a6 <prvTaskExitError+0x2a>
        __asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
    }
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <prvTaskExitError+0x28>
        __asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60bb      	str	r3, [r7, #8]
    }
 80040b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040ba:	bf00      	nop
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0fc      	beq.n	80040bc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	20000010 	.word	0x20000010
	...

080040e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <pxCurrentTCBConst2>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	f380 8809 	msr	PSP, r0
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	4770      	bx	lr
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst2>:
 8004100:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004108:	4808      	ldr	r0, [pc, #32]	; (800412c <prvPortStartFirstTask+0x24>)
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f380 8808 	msr	MSP, r0
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8814 	msr	CONTROL, r0
 800411a:	b662      	cpsie	i
 800411c:	b661      	cpsie	f
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	df00      	svc	0
 8004128:	bf00      	nop
 800412a:	0000      	.short	0x0000
 800412c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop

08004134 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800413a:	4b46      	ldr	r3, [pc, #280]	; (8004254 <xPortStartScheduler+0x120>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a46      	ldr	r2, [pc, #280]	; (8004258 <xPortStartScheduler+0x124>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10a      	bne.n	800415a <xPortStartScheduler+0x26>
        __asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	613b      	str	r3, [r7, #16]
    }
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <xPortStartScheduler+0x120>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3f      	ldr	r2, [pc, #252]	; (800425c <xPortStartScheduler+0x128>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10a      	bne.n	800417a <xPortStartScheduler+0x46>
        __asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60fb      	str	r3, [r7, #12]
    }
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800417a:	4b39      	ldr	r3, [pc, #228]	; (8004260 <xPortStartScheduler+0x12c>)
 800417c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	22ff      	movs	r2, #255	; 0xff
 800418a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <xPortStartScheduler+0x130>)
 80041a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041a2:	4b31      	ldr	r3, [pc, #196]	; (8004268 <xPortStartScheduler+0x134>)
 80041a4:	2207      	movs	r2, #7
 80041a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041a8:	e009      	b.n	80041be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <xPortStartScheduler+0x134>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	4a2d      	ldr	r2, [pc, #180]	; (8004268 <xPortStartScheduler+0x134>)
 80041b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d0ef      	beq.n	80041aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ca:	4b27      	ldr	r3, [pc, #156]	; (8004268 <xPortStartScheduler+0x134>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d00a      	beq.n	80041ec <xPortStartScheduler+0xb8>
        __asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	60bb      	str	r3, [r7, #8]
    }
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <xPortStartScheduler+0x134>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <xPortStartScheduler+0x134>)
 80041f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041f6:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <xPortStartScheduler+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041fe:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <xPortStartScheduler+0x134>)
 8004200:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <xPortStartScheduler+0x138>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a17      	ldr	r2, [pc, #92]	; (800426c <xPortStartScheduler+0x138>)
 8004210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004214:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <xPortStartScheduler+0x138>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a14      	ldr	r2, [pc, #80]	; (800426c <xPortStartScheduler+0x138>)
 800421c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004220:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004222:	f000 f963 	bl	80044ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <xPortStartScheduler+0x13c>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800422c:	f000 f982 	bl	8004534 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <xPortStartScheduler+0x140>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0f      	ldr	r2, [pc, #60]	; (8004274 <xPortStartScheduler+0x140>)
 8004236:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800423a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800423c:	f7ff ff64 	bl	8004108 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004240:	f7ff f86a 	bl	8003318 <vTaskSwitchContext>
    prvTaskExitError();
 8004244:	f7ff ff1a 	bl	800407c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	e000ed00 	.word	0xe000ed00
 8004258:	410fc271 	.word	0x410fc271
 800425c:	410fc270 	.word	0x410fc270
 8004260:	e000e400 	.word	0xe000e400
 8004264:	20000178 	.word	0x20000178
 8004268:	2000017c 	.word	0x2000017c
 800426c:	e000ed20 	.word	0xe000ed20
 8004270:	20000010 	.word	0x20000010
 8004274:	e000ef34 	.word	0xe000ef34

08004278 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800427e:	4b37      	ldr	r3, [pc, #220]	; (800435c <vInitPrioGroupValue+0xe4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a37      	ldr	r2, [pc, #220]	; (8004360 <vInitPrioGroupValue+0xe8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10a      	bne.n	800429e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	613b      	str	r3, [r7, #16]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800429e:	4b2f      	ldr	r3, [pc, #188]	; (800435c <vInitPrioGroupValue+0xe4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a30      	ldr	r2, [pc, #192]	; (8004364 <vInitPrioGroupValue+0xec>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10a      	bne.n	80042be <vInitPrioGroupValue+0x46>
        __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
    }
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <vInitPrioGroupValue+0xf0>)
 80042c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	22ff      	movs	r2, #255	; 0xff
 80042ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <vInitPrioGroupValue+0xf4>)
 80042e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <vInitPrioGroupValue+0xf8>)
 80042e8:	2207      	movs	r2, #7
 80042ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ec:	e009      	b.n	8004302 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <vInitPrioGroupValue+0xf8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <vInitPrioGroupValue+0xf8>)
 80042f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d0ef      	beq.n	80042ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800430e:	4b18      	ldr	r3, [pc, #96]	; (8004370 <vInitPrioGroupValue+0xf8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	d00a      	beq.n	8004330 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60bb      	str	r3, [r7, #8]
    }
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <vInitPrioGroupValue+0xf8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <vInitPrioGroupValue+0xf8>)
 8004338:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <vInitPrioGroupValue+0xf8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004342:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <vInitPrioGroupValue+0xf8>)
 8004344:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000ed00 	.word	0xe000ed00
 8004360:	410fc271 	.word	0x410fc271
 8004364:	410fc270 	.word	0x410fc270
 8004368:	e000e400 	.word	0xe000e400
 800436c:	20000178 	.word	0x20000178
 8004370:	2000017c 	.word	0x2000017c

08004374 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
        __asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	607b      	str	r3, [r7, #4]
    }
 800438c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <vPortEnterCritical+0x58>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3301      	adds	r3, #1
 8004394:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <vPortEnterCritical+0x58>)
 8004396:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <vPortEnterCritical+0x58>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10f      	bne.n	80043c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <vPortEnterCritical+0x5c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	603b      	str	r3, [r7, #0]
    }
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <vPortEnterCritical+0x4a>
    }
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	20000010 	.word	0x20000010
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <vPortExitCritical+0x50>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <vPortExitCritical+0x24>
        __asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	607b      	str	r3, [r7, #4]
    }
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <vPortExitCritical+0x50>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <vPortExitCritical+0x50>)
 8004400:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <vPortExitCritical+0x50>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <vPortExitCritical+0x42>
 800440a:	2300      	movs	r3, #0
 800440c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f383 8811 	msr	BASEPRI, r3
    }
 8004414:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000010 	.word	0x20000010
	...

08004430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004430:	f3ef 8009 	mrs	r0, PSP
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <pxCurrentTCBConst>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f01e 0f10 	tst.w	lr, #16
 8004440:	bf08      	it	eq
 8004442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	6010      	str	r0, [r2, #0]
 800444c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004454:	f380 8811 	msr	BASEPRI, r0
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f7fe ff5a 	bl	8003318 <vTaskSwitchContext>
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	f380 8811 	msr	BASEPRI, r0
 800446c:	bc09      	pop	{r0, r3}
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	6808      	ldr	r0, [r1, #0]
 8004472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004476:	f01e 0f10 	tst.w	lr, #16
 800447a:	bf08      	it	eq
 800447c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004480:	f380 8809 	msr	PSP, r0
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst>:
 8004490:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
        __asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
    }
 80044b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044b2:	f002 fb7d 	bl	8006bb0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044b6:	f7fe fe95 	bl	80031e4 <xTaskIncrementTick>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044c0:	f002 fbd4 	bl	8006c6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <SysTick_Handler+0x50>)
 80044c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e001      	b.n	80044d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80044ce:	f002 fbb1 	bl	8006c34 <SEGGER_SYSVIEW_RecordExitISR>
 80044d2:	2300      	movs	r3, #0
 80044d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f383 8811 	msr	BASEPRI, r3
    }
 80044dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <vPortSetupTimerInterrupt+0x38>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <vPortSetupTimerInterrupt+0x3c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <vPortSetupTimerInterrupt+0x40>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <vPortSetupTimerInterrupt+0x44>)
 800450a:	3b01      	subs	r3, #1
 800450c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 8004510:	2207      	movs	r2, #7
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e010 	.word	0xe000e010
 8004524:	e000e018 	.word	0xe000e018
 8004528:	20000000 	.word	0x20000000
 800452c:	10624dd3 	.word	0x10624dd3
 8004530:	e000e014 	.word	0xe000e014

08004534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004544 <vPortEnableVFP+0x10>
 8004538:	6801      	ldr	r1, [r0, #0]
 800453a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800453e:	6001      	str	r1, [r0, #0]
 8004540:	4770      	bx	lr
 8004542:	0000      	.short	0x0000
 8004544:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop

0800454c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004552:	f3ef 8305 	mrs	r3, IPSR
 8004556:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b0f      	cmp	r3, #15
 800455c:	d914      	bls.n	8004588 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <vPortValidateInterruptPriority+0x70>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <vPortValidateInterruptPriority+0x74>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	7afa      	ldrb	r2, [r7, #11]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20a      	bcs.n	8004588 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	607b      	str	r3, [r7, #4]
    }
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <vPortValidateInterruptPriority+0x78>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <vPortValidateInterruptPriority+0x7c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d90a      	bls.n	80045ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	603b      	str	r3, [r7, #0]
    }
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <vPortValidateInterruptPriority+0x60>
    }
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e3f0 	.word	0xe000e3f0
 80045c0:	20000178 	.word	0x20000178
 80045c4:	e000ed0c 	.word	0xe000ed0c
 80045c8:	2000017c 	.word	0x2000017c

080045cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045d8:	f7fe fd42 	bl	8003060 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045dc:	4b65      	ldr	r3, [pc, #404]	; (8004774 <pvPortMalloc+0x1a8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045e4:	f000 f934 	bl	8004850 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045e8:	4b63      	ldr	r3, [pc, #396]	; (8004778 <pvPortMalloc+0x1ac>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f040 80a7 	bne.w	8004744 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02d      	beq.n	8004658 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045fc:	2208      	movs	r2, #8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d227      	bcs.n	8004658 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004608:	2208      	movs	r2, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d021      	beq.n	800465e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f023 0307 	bic.w	r3, r3, #7
 8004620:	3308      	adds	r3, #8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d214      	bcs.n	8004652 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	3308      	adds	r3, #8
 8004630:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	2b00      	cmp	r3, #0
 800463a:	d010      	beq.n	800465e <pvPortMalloc+0x92>
        __asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	617b      	str	r3, [r7, #20]
    }
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004656:	e002      	b.n	800465e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	e000      	b.n	8004660 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800465e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d06e      	beq.n	8004744 <pvPortMalloc+0x178>
 8004666:	4b45      	ldr	r3, [pc, #276]	; (800477c <pvPortMalloc+0x1b0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d869      	bhi.n	8004744 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004670:	4b43      	ldr	r3, [pc, #268]	; (8004780 <pvPortMalloc+0x1b4>)
 8004672:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <pvPortMalloc+0x1b4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800467a:	e004      	b.n	8004686 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d903      	bls.n	8004698 <pvPortMalloc+0xcc>
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f1      	bne.n	800467c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <pvPortMalloc+0x1a8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	429a      	cmp	r2, r3
 80046a0:	d050      	beq.n	8004744 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2208      	movs	r2, #8
 80046a8:	4413      	add	r3, r2
 80046aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad2      	subs	r2, r2, r3
 80046bc:	2308      	movs	r3, #8
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d91f      	bls.n	8004704 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <pvPortMalloc+0x120>
        __asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	613b      	str	r3, [r7, #16]
    }
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046fe:	69b8      	ldr	r0, [r7, #24]
 8004700:	f000 f908 	bl	8004914 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <pvPortMalloc+0x1b0>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <pvPortMalloc+0x1b0>)
 8004710:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <pvPortMalloc+0x1b0>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <pvPortMalloc+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d203      	bcs.n	8004726 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <pvPortMalloc+0x1b0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <pvPortMalloc+0x1b8>)
 8004724:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <pvPortMalloc+0x1ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	431a      	orrs	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <pvPortMalloc+0x1bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	4a11      	ldr	r2, [pc, #68]	; (8004788 <pvPortMalloc+0x1bc>)
 8004742:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004744:	f7fe fc9a 	bl	800307c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <pvPortMalloc+0x19c>
        __asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
    }
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <pvPortMalloc+0x19a>
    return pvReturn;
 8004768:	69fb      	ldr	r3, [r7, #28]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20012d88 	.word	0x20012d88
 8004778:	20012d9c 	.word	0x20012d9c
 800477c:	20012d8c 	.word	0x20012d8c
 8004780:	20012d80 	.word	0x20012d80
 8004784:	20012d90 	.word	0x20012d90
 8004788:	20012d94 	.word	0x20012d94

0800478c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04d      	beq.n	800483a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800479e:	2308      	movs	r3, #8
 80047a0:	425b      	negs	r3, r3
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4413      	add	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <vPortFree+0xb8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <vPortFree+0x44>
        __asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60fb      	str	r3, [r7, #12]
    }
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <vPortFree+0x62>
        __asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60bb      	str	r3, [r7, #8]
    }
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <vPortFree+0xb8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01e      	beq.n	800483a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11a      	bne.n	800483a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <vPortFree+0xb8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004814:	f7fe fc24 	bl	8003060 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <vPortFree+0xbc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4413      	add	r3, r2
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <vPortFree+0xbc>)
 8004824:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004826:	6938      	ldr	r0, [r7, #16]
 8004828:	f000 f874 	bl	8004914 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <vPortFree+0xc0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	4a06      	ldr	r2, [pc, #24]	; (800484c <vPortFree+0xc0>)
 8004834:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004836:	f7fe fc21 	bl	800307c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20012d9c 	.word	0x20012d9c
 8004848:	20012d8c 	.word	0x20012d8c
 800484c:	20012d98 	.word	0x20012d98

08004850 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004856:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800485a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <prvHeapInit+0xac>)
 800485e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3307      	adds	r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0307 	bic.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <prvHeapInit+0xac>)
 8004880:	4413      	add	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004888:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <prvHeapInit+0xb0>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <prvHeapInit+0xb0>)
 8004890:	2200      	movs	r2, #0
 8004892:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800489c:	2208      	movs	r2, #8
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <prvHeapInit+0xb4>)
 80048b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <prvHeapInit+0xb4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <prvHeapInit+0xb4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <prvHeapInit+0xb4>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <prvHeapInit+0xb8>)
 80048de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a09      	ldr	r2, [pc, #36]	; (800490c <prvHeapInit+0xbc>)
 80048e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <prvHeapInit+0xc0>)
 80048ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048ee:	601a      	str	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000180 	.word	0x20000180
 8004900:	20012d80 	.word	0x20012d80
 8004904:	20012d88 	.word	0x20012d88
 8004908:	20012d90 	.word	0x20012d90
 800490c:	20012d8c 	.word	0x20012d8c
 8004910:	20012d9c 	.word	0x20012d9c

08004914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <prvInsertBlockIntoFreeList+0xac>)
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e002      	b.n	8004928 <prvInsertBlockIntoFreeList+0x14>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d8f7      	bhi.n	8004922 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d108      	bne.n	8004956 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d118      	bne.n	800499c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d00d      	beq.n	8004992 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	441a      	add	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e008      	b.n	80049a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e003      	b.n	80049a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d002      	beq.n	80049b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20012d80 	.word	0x20012d80
 80049c4:	20012d88 	.word	0x20012d88

080049c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80049cc:	4803      	ldr	r0, [pc, #12]	; (80049dc <_cbSendSystemDesc+0x14>)
 80049ce:	f002 f899 	bl	8006b04 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049d2:	4803      	ldr	r0, [pc, #12]	; (80049e0 <_cbSendSystemDesc+0x18>)
 80049d4:	f002 f896 	bl	8006b04 <SEGGER_SYSVIEW_SendSysDesc>
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08007358 	.word	0x08007358
 80049e0:	08007394 	.word	0x08007394

080049e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <SEGGER_SYSVIEW_Conf+0x20>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <SEGGER_SYSVIEW_Conf+0x20>)
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <SEGGER_SYSVIEW_Conf+0x24>)
 80049f2:	4a06      	ldr	r2, [pc, #24]	; (8004a0c <SEGGER_SYSVIEW_Conf+0x28>)
 80049f4:	f001 fc02 	bl	80061fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80049fc:	f001 fc42 	bl	8006284 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000000 	.word	0x20000000
 8004a08:	080049c9 	.word	0x080049c9
 8004a0c:	08007434 	.word	0x08007434

08004a10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	e033      	b.n	8004a84 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a1c:	491e      	ldr	r1, [pc, #120]	; (8004a98 <_cbSendTaskList+0x88>)
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	491a      	ldr	r1, [pc, #104]	; (8004a98 <_cbSendTaskList+0x88>)
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	4c16      	ldr	r4, [pc, #88]	; (8004a98 <_cbSendTaskList+0x88>)
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4423      	add	r3, r4
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	681c      	ldr	r4, [r3, #0]
 8004a50:	4d11      	ldr	r5, [pc, #68]	; (8004a98 <_cbSendTaskList+0x88>)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	442b      	add	r3, r5
 8004a5e:	330c      	adds	r3, #12
 8004a60:	681d      	ldr	r5, [r3, #0]
 8004a62:	4e0d      	ldr	r6, [pc, #52]	; (8004a98 <_cbSendTaskList+0x88>)
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4433      	add	r3, r6
 8004a70:	3310      	adds	r3, #16
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	462b      	mov	r3, r5
 8004a78:	4622      	mov	r2, r4
 8004a7a:	f000 f8b5 	bl	8004be8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3301      	adds	r3, #1
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <_cbSendTaskList+0x8c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3c6      	bcc.n	8004a1c <_cbSendTaskList+0xc>
  }
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a98:	20012da0 	.word	0x20012da0
 8004a9c:	20012e40 	.word	0x20012e40

08004aa0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004aa0:	b5b0      	push	{r4, r5, r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004aa6:	f7fe fb8b 	bl	80031c0 <xTaskGetTickCountFromISR>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	f04f 0400 	mov.w	r4, #0
 8004ac2:	f04f 0500 	mov.w	r5, #0
 8004ac6:	015d      	lsls	r5, r3, #5
 8004ac8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004acc:	0154      	lsls	r4, r2, #5
 8004ace:	4622      	mov	r2, r4
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	1a12      	subs	r2, r2, r0
 8004ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad8:	f04f 0400 	mov.w	r4, #0
 8004adc:	f04f 0500 	mov.w	r5, #0
 8004ae0:	009d      	lsls	r5, r3, #2
 8004ae2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004ae6:	0094      	lsls	r4, r2, #2
 8004ae8:	4622      	mov	r2, r4
 8004aea:	462b      	mov	r3, r5
 8004aec:	1812      	adds	r2, r2, r0
 8004aee:	eb41 0303 	adc.w	r3, r1, r3
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	00d9      	lsls	r1, r3, #3
 8004afc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b00:	00d0      	lsls	r0, r2, #3
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bdb0      	pop	{r4, r5, r7, pc}

08004b18 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b26:	2205      	movs	r2, #5
 8004b28:	492b      	ldr	r1, [pc, #172]	; (8004bd8 <SYSVIEW_AddTask+0xc0>)
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f002 fbaa 	bl	8007284 <memcmp>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d04b      	beq.n	8004bce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b07      	cmp	r3, #7
 8004b3c:	d903      	bls.n	8004b46 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b3e:	4828      	ldr	r0, [pc, #160]	; (8004be0 <SYSVIEW_AddTask+0xc8>)
 8004b40:	f002 faf2 	bl	8007128 <SEGGER_SYSVIEW_Warn>
    return;
 8004b44:	e044      	b.n	8004bd0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b46:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4926      	ldr	r1, [pc, #152]	; (8004be4 <SYSVIEW_AddTask+0xcc>)
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4921      	ldr	r1, [pc, #132]	; (8004be4 <SYSVIEW_AddTask+0xcc>)
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	491b      	ldr	r1, [pc, #108]	; (8004be4 <SYSVIEW_AddTask+0xcc>)
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	3308      	adds	r3, #8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4916      	ldr	r1, [pc, #88]	; (8004be4 <SYSVIEW_AddTask+0xcc>)
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	330c      	adds	r3, #12
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4910      	ldr	r1, [pc, #64]	; (8004be4 <SYSVIEW_AddTask+0xcc>)
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3310      	adds	r3, #16
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <SYSVIEW_AddTask+0xc4>)
 8004bba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f80e 	bl	8004be8 <SYSVIEW_SendTaskInfo>
 8004bcc:	e000      	b.n	8004bd0 <SYSVIEW_AddTask+0xb8>
    return;
 8004bce:	bf00      	nop

}
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	080073a4 	.word	0x080073a4
 8004bdc:	20012e40 	.word	0x20012e40
 8004be0:	080073ac 	.word	0x080073ac
 8004be4:	20012da0 	.word	0x20012da0

08004be8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	2214      	movs	r2, #20
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f002 fb5c 	bl	80072bc <memset>
  TaskInfo.TaskID     = TaskID;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 fe79 	bl	8006914 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c22:	bf00      	nop
 8004c24:	3728      	adds	r7, #40	; 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <__NVIC_EnableIRQ>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db0b      	blt.n	8004c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4907      	ldr	r1, [pc, #28]	; (8004c64 <__NVIC_EnableIRQ+0x38>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	e000e100 	.word	0xe000e100

08004c68 <__NVIC_SetPriority>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db0a      	blt.n	8004c92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <__NVIC_SetPriority+0x4c>)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c90:	e00a      	b.n	8004ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <__NVIC_SetPriority+0x50>)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	3b04      	subs	r3, #4
 8004ca0:	0112      	lsls	r2, r2, #4
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	761a      	strb	r2, [r3, #24]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000e100 	.word	0xe000e100
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004cc2:	f002 fa8d 	bl	80071e0 <SEGGER_SYSVIEW_IsStarted>
 8004cc6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004cce:	f001 fca5 	bl	800661c <SEGGER_SYSVIEW_Start>
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <_cbOnUARTRx+0x3c>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d806      	bhi.n	8004cfc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <_cbOnUARTRx+0x3c>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <_cbOnUARTRx+0x3c>)
 8004cf8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004cfa:	e009      	b.n	8004d10 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004cfc:	f7ff ffde 	bl	8004cbc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <_cbOnUARTRx+0x3c>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4618      	mov	r0, r3
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	2201      	movs	r2, #1
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f000 fb9a 	bl	8005444 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004d10:	bf00      	nop
}
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000014 	.word	0x20000014

08004d1c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004d24:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <_cbOnUARTTx+0x5c>)
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d80f      	bhi.n	8004d4c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <_cbOnUARTTx+0x5c>)
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <_cbOnUARTTx+0x60>)
 8004d34:	5c9a      	ldrb	r2, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <_cbOnUARTTx+0x5c>)
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <_cbOnUARTTx+0x5c>)
 8004d44:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004d4a:	e00f      	b.n	8004d6c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <_cbOnUARTTx+0x5c>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa19 	bl	800518c <SEGGER_RTT_ReadUpBufferNoLock>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da02      	bge.n	8004d6a <_cbOnUARTTx+0x4e>
    r = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e000      	b.n	8004d6c <_cbOnUARTTx+0x50>
  }
Done:
 8004d6a:	bf00      	nop
  return r;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000014 	.word	0x20000014
 8004d7c:	0800743c 	.word	0x0800743c

08004d80 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <SEGGER_UART_init+0x1c>)
 8004d8a:	4905      	ldr	r1, [pc, #20]	; (8004da0 <SEGGER_UART_init+0x20>)
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f863 	bl	8004e58 <HIF_UART_Init>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08004cdd 	.word	0x08004cdd
 8004da0:	08004d1d 	.word	0x08004d1d

08004da4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004daa:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <USART2_IRQHandler+0x80>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d011      	beq.n	8004dde <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <USART2_IRQHandler+0x84>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 030b 	and.w	r3, r3, #11
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d108      	bne.n	8004dde <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004dcc:	4b17      	ldr	r3, [pc, #92]	; (8004e2c <USART2_IRQHandler+0x88>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004dd4:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <USART2_IRQHandler+0x88>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	79fa      	ldrb	r2, [r7, #7]
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01a      	beq.n	8004e1e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004de8:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <USART2_IRQHandler+0x8c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <USART2_IRQHandler+0x8c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	1dfa      	adds	r2, r7, #7
 8004df6:	4610      	mov	r0, r2
 8004df8:	4798      	blx	r3
 8004dfa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004e02:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <USART2_IRQHandler+0x90>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <USART2_IRQHandler+0x90>)
 8004e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e006      	b.n	8004e1e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <USART2_IRQHandler+0x80>)
 8004e12:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004e14:	79fa      	ldrb	r2, [r7, #7]
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <USART2_IRQHandler+0x84>)
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e000      	b.n	8004e1e <USART2_IRQHandler+0x7a>
      return;
 8004e1c:	bf00      	nop
    }
  }
}
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40004400 	.word	0x40004400
 8004e28:	40004404 	.word	0x40004404
 8004e2c:	20012e44 	.word	0x20012e44
 8004e30:	20012e48 	.word	0x20012e48
 8004e34:	4000440c 	.word	0x4000440c

08004e38 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	6013      	str	r3, [r2, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	4000440c 	.word	0x4000440c

08004e58 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004e64:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <HIF_UART_Init+0xc8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <HIF_UART_Init+0xc8>)
 8004e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004e70:	4b2c      	ldr	r3, [pc, #176]	; (8004f24 <HIF_UART_Init+0xcc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <HIF_UART_Init+0xcc>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HIF_UART_Init+0xd0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e88:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004e90:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004e92:	4a25      	ldr	r2, [pc, #148]	; (8004f28 <HIF_UART_Init+0xd0>)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004e98:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HIF_UART_Init+0xd4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004eac:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004eae:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <HIF_UART_Init+0xd4>)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <HIF_UART_Init+0xd8>)
 8004eb6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004eba:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <HIF_UART_Init+0xdc>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004ec2:	4b1d      	ldr	r3, [pc, #116]	; (8004f38 <HIF_UART_Init+0xe0>)
 8004ec4:	2280      	movs	r2, #128	; 0x80
 8004ec6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HIF_UART_Init+0xe4>)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d302      	bcc.n	8004eee <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004ee8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004eec:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <HIF_UART_Init+0xe8>)
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004efe:	4a11      	ldr	r2, [pc, #68]	; (8004f44 <HIF_UART_Init+0xec>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004f04:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <HIF_UART_Init+0xf0>)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004f0a:	2106      	movs	r1, #6
 8004f0c:	2026      	movs	r0, #38	; 0x26
 8004f0e:	f7ff feab 	bl	8004c68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004f12:	2026      	movs	r0, #38	; 0x26
 8004f14:	f7ff fe8a 	bl	8004c2c <__NVIC_EnableIRQ>
}
 8004f18:	bf00      	nop
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023840 	.word	0x40023840
 8004f24:	40023830 	.word	0x40023830
 8004f28:	40020020 	.word	0x40020020
 8004f2c:	40020000 	.word	0x40020000
 8004f30:	4000440c 	.word	0x4000440c
 8004f34:	40004410 	.word	0x40004410
 8004f38:	40004414 	.word	0x40004414
 8004f3c:	0501bd00 	.word	0x0501bd00
 8004f40:	40004408 	.word	0x40004408
 8004f44:	20012e44 	.word	0x20012e44
 8004f48:	20012e48 	.word	0x20012e48

08004f4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <_DoInit+0x98>)
 8004f54:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <_DoInit+0x9c>)
 8004f66:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a20      	ldr	r2, [pc, #128]	; (8004fec <_DoInit+0xa0>)
 8004f6c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f74:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <_DoInit+0x9c>)
 8004f8c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a17      	ldr	r2, [pc, #92]	; (8004ff0 <_DoInit+0xa4>)
 8004f92:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2210      	movs	r2, #16
 8004f98:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3307      	adds	r3, #7
 8004fb0:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <_DoInit+0xa8>)
 8004fb2:	6810      	ldr	r0, [r2, #0]
 8004fb4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fb6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <_DoInit+0xac>)
 8004fbe:	6810      	ldr	r0, [r2, #0]
 8004fc0:	6018      	str	r0, [r3, #0]
 8004fc2:	8891      	ldrh	r1, [r2, #4]
 8004fc4:	7992      	ldrb	r2, [r2, #6]
 8004fc6:	8099      	strh	r1, [r3, #4]
 8004fc8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fd4:	f3bf 8f5f 	dmb	sy
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	20014404 	.word	0x20014404
 8004fe8:	080073fc 	.word	0x080073fc
 8004fec:	20012e4c 	.word	0x20012e4c
 8004ff0:	2001324c 	.word	0x2001324c
 8004ff4:	08007408 	.word	0x08007408
 8004ff8:	0800740c 	.word	0x0800740c

08004ffc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005008:	2300      	movs	r3, #0
 800500a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	429a      	cmp	r2, r3
 800501e:	d905      	bls.n	800502c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
 800502a:	e007      	b.n	800503c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	69b9      	ldr	r1, [r7, #24]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1acb      	subs	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	3b01      	subs	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	4293      	cmp	r3, r2
 8005048:	bf28      	it	cs
 800504a:	4613      	movcs	r3, r2
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4293      	cmp	r3, r2
 8005054:	bf28      	it	cs
 8005056:	4613      	movcs	r3, r2
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	6978      	ldr	r0, [r7, #20]
 800506a:	f002 f919 	bl	80072a0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800506e:	6a3a      	ldr	r2, [r7, #32]
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	4413      	add	r3, r2
 8005074:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	4413      	add	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	4413      	add	r3, r2
 800508c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	429a      	cmp	r2, r3
 8005096:	d101      	bne.n	800509c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800509c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1b2      	bne.n	8005012 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80050ac:	6a3b      	ldr	r3, [r7, #32]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b088      	sub	sp, #32
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d911      	bls.n	80050fe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	6938      	ldr	r0, [r7, #16]
 80050ea:	f002 f8d9 	bl	80072a0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050ee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	441a      	add	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80050fc:	e01f      	b.n	800513e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	6938      	ldr	r0, [r7, #16]
 8005112:	f002 f8c5 	bl	80072a0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	4413      	add	r3, r2
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4619      	mov	r1, r3
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f002 f8b6 	bl	80072a0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005134:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	60da      	str	r2, [r3, #12]
}
 800513e:	bf00      	nop
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005146:	b480      	push	{r7}
 8005148:	b087      	sub	sp, #28
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	429a      	cmp	r2, r3
 8005160:	d808      	bhi.n	8005174 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	3b01      	subs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e004      	b.n	800517e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800517e:	697b      	ldr	r3, [r7, #20]
}
 8005180:	4618      	mov	r0, r3
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b08c      	sub	sp, #48	; 0x30
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005198:	4b3e      	ldr	r3, [pc, #248]	; (8005294 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80051a6:	f7ff fed1 	bl	8004f4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4a37      	ldr	r2, [pc, #220]	; (8005294 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80051b8:	4413      	add	r3, r2
 80051ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80051cc:	2300      	movs	r3, #0
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80051d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d92b      	bls.n	8005230 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4293      	cmp	r3, r2
 80051e8:	bf28      	it	cs
 80051ea:	4613      	movcs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	4413      	add	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	6939      	ldr	r1, [r7, #16]
 80051fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051fe:	f002 f84f 	bl	80072a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800521a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	4413      	add	r3, r2
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005228:	429a      	cmp	r2, r3
 800522a:	d101      	bne.n	8005230 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800522c:	2300      	movs	r3, #0
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4293      	cmp	r3, r2
 800523e:	bf28      	it	cs
 8005240:	4613      	movcs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d019      	beq.n	800527e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	4413      	add	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	6939      	ldr	r1, [r7, #16]
 8005258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525a:	f002 f821 	bl	80072a0 <memcpy>
    NumBytesRead += NumBytesRem;
 800525e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005288:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800528c:	4618      	mov	r0, r3
 800528e:	3730      	adds	r7, #48	; 0x30
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20014404 	.word	0x20014404

08005298 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80052a4:	4b3e      	ldr	r3, [pc, #248]	; (80053a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <SEGGER_RTT_ReadNoLock+0x1e>
 80052b2:	f7ff fe4b 	bl	8004f4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	3360      	adds	r3, #96	; 0x60
 80052c2:	4a37      	ldr	r2, [pc, #220]	; (80053a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80052c4:	4413      	add	r3, r2
 80052c6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80052d8:	2300      	movs	r3, #0
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80052dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d92b      	bls.n	800533c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4293      	cmp	r3, r2
 80052f4:	bf28      	it	cs
 80052f6:	4613      	movcs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	4413      	add	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800530a:	f001 ffc9 	bl	80072a0 <memcpy>
    NumBytesRead += NumBytesRem;
 800530e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4413      	add	r3, r2
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005334:	429a      	cmp	r2, r3
 8005336:	d101      	bne.n	800533c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005338:	2300      	movs	r3, #0
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4293      	cmp	r3, r2
 800534a:	bf28      	it	cs
 800534c:	4613      	movcs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d019      	beq.n	800538a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	4413      	add	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	6939      	ldr	r1, [r7, #16]
 8005364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005366:	f001 ff9b 	bl	80072a0 <memcpy>
    NumBytesRead += NumBytesRem;
 800536a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	4413      	add	r3, r2
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4413      	add	r3, r2
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005394:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005398:	4618      	mov	r0, r3
 800539a:	3730      	adds	r7, #48	; 0x30
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20014404 	.word	0x20014404

080053a4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	3360      	adds	r3, #96	; 0x60
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80053c2:	4413      	add	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d029      	beq.n	8005422 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d82e      	bhi.n	8005430 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d013      	beq.n	8005402 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80053da:	e029      	b.n	8005430 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80053dc:	6978      	ldr	r0, [r7, #20]
 80053de:	f7ff feb2 	bl	8005146 <_GetAvailWriteSpace>
 80053e2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d202      	bcs.n	80053f2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80053f0:	e021      	b.n	8005436 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	69b9      	ldr	r1, [r7, #24]
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f7ff fe5b 	bl	80050b6 <_WriteNoCheck>
    break;
 8005400:	e019      	b.n	8005436 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005402:	6978      	ldr	r0, [r7, #20]
 8005404:	f7ff fe9f 	bl	8005146 <_GetAvailWriteSpace>
 8005408:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4293      	cmp	r3, r2
 8005410:	bf28      	it	cs
 8005412:	4613      	movcs	r3, r2
 8005414:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7ff fe4b 	bl	80050b6 <_WriteNoCheck>
    break;
 8005420:	e009      	b.n	8005436 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7ff fde8 	bl	8004ffc <_WriteBlocking>
 800542c:	61f8      	str	r0, [r7, #28]
    break;
 800542e:	e002      	b.n	8005436 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005430:	2300      	movs	r3, #0
 8005432:	61fb      	str	r3, [r7, #28]
    break;
 8005434:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005436:	69fb      	ldr	r3, [r7, #28]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20014404 	.word	0x20014404

08005444 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800545e:	f7ff fd75 	bl	8004f4c <_DoInit>
  SEGGER_RTT_LOCK();
 8005462:	f3ef 8311 	mrs	r3, BASEPRI
 8005466:	f04f 0120 	mov.w	r1, #32
 800546a:	f381 8811 	msr	BASEPRI, r1
 800546e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff ff95 	bl	80053a4 <SEGGER_RTT_WriteDownBufferNoLock>
 800547a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20014404 	.word	0x20014404

08005490 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800549e:	4b3d      	ldr	r3, [pc, #244]	; (8005594 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80054ac:	f7ff fd4e 	bl	8004f4c <_DoInit>
  SEGGER_RTT_LOCK();
 80054b0:	f3ef 8311 	mrs	r3, BASEPRI
 80054b4:	f04f 0120 	mov.w	r1, #32
 80054b8:	f381 8811 	msr	BASEPRI, r1
 80054bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054be:	4b35      	ldr	r3, [pc, #212]	; (8005594 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80054c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80054c6:	6939      	ldr	r1, [r7, #16]
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	4613      	mov	r3, r2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	440b      	add	r3, r1
 80054d6:	3304      	adds	r3, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3301      	adds	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	dbeb      	blt.n	80054c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80054ee:	e000      	b.n	80054f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80054f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	da3f      	bge.n	800557c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80054fc:	6939      	ldr	r1, [r7, #16]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	440b      	add	r3, r1
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005510:	6939      	ldr	r1, [r7, #16]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	4613      	mov	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4413      	add	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	440b      	add	r3, r1
 8005520:	3304      	adds	r3, #4
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	440b      	add	r3, r1
 8005534:	3320      	adds	r3, #32
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800553a:	6939      	ldr	r1, [r7, #16]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	440b      	add	r3, r1
 8005548:	3328      	adds	r3, #40	; 0x28
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800554e:	6939      	ldr	r1, [r7, #16]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	4613      	mov	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4413      	add	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	440b      	add	r3, r1
 800555c:	3324      	adds	r3, #36	; 0x24
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005562:	6939      	ldr	r1, [r7, #16]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	440b      	add	r3, r1
 8005570:	332c      	adds	r3, #44	; 0x2c
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005576:	f3bf 8f5f 	dmb	sy
 800557a:	e002      	b.n	8005582 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005588:	69fb      	ldr	r3, [r7, #28]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20014404 	.word	0x20014404

08005598 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80055a6:	4b33      	ldr	r3, [pc, #204]	; (8005674 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80055b4:	f7ff fcca 	bl	8004f4c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055b8:	4b2e      	ldr	r3, [pc, #184]	; (8005674 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80055ba:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	461a      	mov	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d24d      	bcs.n	8005664 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80055c8:	f3ef 8311 	mrs	r3, BASEPRI
 80055cc:	f04f 0120 	mov.w	r1, #32
 80055d0:	f381 8811 	msr	BASEPRI, r1
 80055d4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d031      	beq.n	8005640 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80055dc:	6979      	ldr	r1, [r7, #20]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	440b      	add	r3, r1
 80055ea:	3360      	adds	r3, #96	; 0x60
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80055f0:	6979      	ldr	r1, [r7, #20]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	440b      	add	r3, r1
 80055fe:	3364      	adds	r3, #100	; 0x64
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005604:	6979      	ldr	r1, [r7, #20]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	3368      	adds	r3, #104	; 0x68
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005618:	6979      	ldr	r1, [r7, #20]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	440b      	add	r3, r1
 8005626:	3370      	adds	r3, #112	; 0x70
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	440b      	add	r3, r1
 800563a:	336c      	adds	r3, #108	; 0x6c
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005640:	6979      	ldr	r1, [r7, #20]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	440b      	add	r3, r1
 800564e:	3374      	adds	r3, #116	; 0x74
 8005650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005652:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005654:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e002      	b.n	800566a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005664:	f04f 33ff 	mov.w	r3, #4294967295
 8005668:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800566a:	69fb      	ldr	r3, [r7, #28]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20014404 	.word	0x20014404

08005678 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005688:	e002      	b.n	8005690 <_EncodeStr+0x18>
    Len++;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f6      	bne.n	800568a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d901      	bls.n	80056a8 <_EncodeStr+0x30>
    Len = Limit;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2bfe      	cmp	r3, #254	; 0xfe
 80056ac:	d806      	bhi.n	80056bc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	60fa      	str	r2, [r7, #12]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	e011      	b.n	80056e0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	60fa      	str	r2, [r7, #12]
 80056c2:	22ff      	movs	r2, #255	; 0xff
 80056c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	60fa      	str	r2, [r7, #12]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	0a19      	lsrs	r1, r3, #8
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	60fa      	str	r2, [r7, #12]
 80056dc:	b2ca      	uxtb	r2, r1
 80056de:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80056e4:	e00a      	b.n	80056fc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	1c53      	adds	r3, r2, #1
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	60f9      	str	r1, [r7, #12]
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	701a      	strb	r2, [r3, #0]
    n++;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	3301      	adds	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	429a      	cmp	r2, r3
 8005702:	d3f0      	bcc.n	80056e6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005704:	68fb      	ldr	r3, [r7, #12]
}
 8005706:	4618      	mov	r0, r3
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005732:	4b36      	ldr	r3, [pc, #216]	; (800580c <_HandleIncomingPacket+0xe0>)
 8005734:	7e1b      	ldrb	r3, [r3, #24]
 8005736:	4618      	mov	r0, r3
 8005738:	1cfb      	adds	r3, r7, #3
 800573a:	2201      	movs	r2, #1
 800573c:	4619      	mov	r1, r3
 800573e:	f7ff fdab 	bl	8005298 <SEGGER_RTT_ReadNoLock>
 8005742:	4603      	mov	r3, r0
 8005744:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dd54      	ble.n	80057f6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d032      	beq.n	80057b8 <_HandleIncomingPacket+0x8c>
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	dc42      	bgt.n	80057dc <_HandleIncomingPacket+0xb0>
 8005756:	2b07      	cmp	r3, #7
 8005758:	dc16      	bgt.n	8005788 <_HandleIncomingPacket+0x5c>
 800575a:	2b00      	cmp	r3, #0
 800575c:	dd3e      	ble.n	80057dc <_HandleIncomingPacket+0xb0>
 800575e:	3b01      	subs	r3, #1
 8005760:	2b06      	cmp	r3, #6
 8005762:	d83b      	bhi.n	80057dc <_HandleIncomingPacket+0xb0>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <_HandleIncomingPacket+0x40>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	0800578f 	.word	0x0800578f
 8005770:	08005795 	.word	0x08005795
 8005774:	0800579b 	.word	0x0800579b
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057ad 	.word	0x080057ad
 8005784:	080057b3 	.word	0x080057b3
 8005788:	2b7f      	cmp	r3, #127	; 0x7f
 800578a:	d036      	beq.n	80057fa <_HandleIncomingPacket+0xce>
 800578c:	e026      	b.n	80057dc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800578e:	f000 ff45 	bl	800661c <SEGGER_SYSVIEW_Start>
      break;
 8005792:	e037      	b.n	8005804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005794:	f000 fffe 	bl	8006794 <SEGGER_SYSVIEW_Stop>
      break;
 8005798:	e034      	b.n	8005804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800579a:	f001 f9d7 	bl	8006b4c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800579e:	e031      	b.n	8005804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80057a0:	f001 f99c 	bl	8006adc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80057a4:	e02e      	b.n	8005804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80057a6:	f001 f81b 	bl	80067e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80057aa:	e02b      	b.n	8005804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80057ac:	f001 fc6a 	bl	8007084 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80057b0:	e028      	b.n	8005804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80057b2:	f001 fc49 	bl	8007048 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80057b6:	e025      	b.n	8005804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <_HandleIncomingPacket+0xe0>)
 80057ba:	7e1b      	ldrb	r3, [r3, #24]
 80057bc:	4618      	mov	r0, r3
 80057be:	1cfb      	adds	r3, r7, #3
 80057c0:	2201      	movs	r2, #1
 80057c2:	4619      	mov	r1, r3
 80057c4:	f7ff fd68 	bl	8005298 <SEGGER_RTT_ReadNoLock>
 80057c8:	4603      	mov	r3, r0
 80057ca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dd15      	ble.n	80057fe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fbb7 	bl	8006f48 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80057da:	e010      	b.n	80057fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	b25b      	sxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da0e      	bge.n	8005802 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057e4:	4b09      	ldr	r3, [pc, #36]	; (800580c <_HandleIncomingPacket+0xe0>)
 80057e6:	7e1b      	ldrb	r3, [r3, #24]
 80057e8:	4618      	mov	r0, r3
 80057ea:	1cfb      	adds	r3, r7, #3
 80057ec:	2201      	movs	r2, #1
 80057ee:	4619      	mov	r1, r3
 80057f0:	f7ff fd52 	bl	8005298 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80057f4:	e005      	b.n	8005802 <_HandleIncomingPacket+0xd6>
    }
  }
 80057f6:	bf00      	nop
 80057f8:	e004      	b.n	8005804 <_HandleIncomingPacket+0xd8>
      break;
 80057fa:	bf00      	nop
 80057fc:	e002      	b.n	8005804 <_HandleIncomingPacket+0xd8>
      break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <_HandleIncomingPacket+0xd8>
      break;
 8005802:	bf00      	nop
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20014264 	.word	0x20014264

08005810 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005816:	2301      	movs	r3, #1
 8005818:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005824:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
 800582a:	e00b      	b.n	8005844 <_TrySendOverflowPacket+0x34>
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	b2da      	uxtb	r2, r3
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	1c59      	adds	r1, r3, #1
 8005834:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	09db      	lsrs	r3, r3, #7
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	2b7f      	cmp	r3, #127	; 0x7f
 8005848:	d8f0      	bhi.n	800582c <_TrySendOverflowPacket+0x1c>
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800585a:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <_TrySendOverflowPacket+0xe4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	e00b      	b.n	800588c <_TrySendOverflowPacket+0x7c>
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1c59      	adds	r1, r3, #1
 800587c:	6279      	str	r1, [r7, #36]	; 0x24
 800587e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	09db      	lsrs	r3, r3, #7
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b7f      	cmp	r3, #127	; 0x7f
 8005890:	d8f0      	bhi.n	8005874 <_TrySendOverflowPacket+0x64>
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	627a      	str	r2, [r7, #36]	; 0x24
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	4618      	mov	r0, r3
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	1d3b      	adds	r3, r7, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	f7fa fc8c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058b8:	4603      	mov	r3, r0
 80058ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80058bc:	f7ff fabc 	bl	8004e38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e004      	b.n	80058e4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	3301      	adds	r3, #1
 80058e0:	4a03      	ldr	r2, [pc, #12]	; (80058f0 <_TrySendOverflowPacket+0xe0>)
 80058e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80058e4:	693b      	ldr	r3, [r7, #16]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3730      	adds	r7, #48	; 0x30
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20014264 	.word	0x20014264
 80058f4:	e0001004 	.word	0xe0001004

080058f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005904:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <_SendPacket+0x1c4>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d010      	beq.n	800592e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800590c:	4b6b      	ldr	r3, [pc, #428]	; (8005abc <_SendPacket+0x1c4>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80a5 	beq.w	8005a60 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005916:	4b69      	ldr	r3, [pc, #420]	; (8005abc <_SendPacket+0x1c4>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d109      	bne.n	8005932 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800591e:	f7ff ff77 	bl	8005810 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005922:	4b66      	ldr	r3, [pc, #408]	; (8005abc <_SendPacket+0x1c4>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b01      	cmp	r3, #1
 8005928:	f040 809c 	bne.w	8005a64 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800592c:	e001      	b.n	8005932 <_SendPacket+0x3a>
    goto Send;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <_SendPacket+0x3c>
Send:
 8005932:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b1f      	cmp	r3, #31
 8005938:	d809      	bhi.n	800594e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800593a:	4b60      	ldr	r3, [pc, #384]	; (8005abc <_SendPacket+0x1c4>)
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	fa22 f303 	lsr.w	r3, r2, r3
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 808d 	bne.w	8005a68 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b17      	cmp	r3, #23
 8005952:	d807      	bhi.n	8005964 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3b01      	subs	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e03d      	b.n	80059e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b7f      	cmp	r3, #127	; 0x7f
 8005970:	d912      	bls.n	8005998 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	09da      	lsrs	r2, r3, #7
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b01      	subs	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	3a01      	subs	r2, #1
 800598a:	60fa      	str	r2, [r7, #12]
 800598c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005990:	b2da      	uxtb	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e006      	b.n	80059a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3b01      	subs	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b7f      	cmp	r3, #127	; 0x7f
 80059aa:	d912      	bls.n	80059d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	09da      	lsrs	r2, r3, #7
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	3a01      	subs	r2, #1
 80059c4:	60fa      	str	r2, [r7, #12]
 80059c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e006      	b.n	80059e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059e0:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <_SendPacket+0x1c8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059e6:	4b35      	ldr	r3, [pc, #212]	; (8005abc <_SendPacket+0x1c4>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	e00b      	b.n	8005a12 <_SendPacket+0x11a>
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	6279      	str	r1, [r7, #36]	; 0x24
 8005a04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	09db      	lsrs	r3, r3, #7
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	2b7f      	cmp	r3, #127	; 0x7f
 8005a16:	d8f0      	bhi.n	80059fa <_SendPacket+0x102>
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a1e:	6a3a      	ldr	r2, [r7, #32]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005a28:	4b24      	ldr	r3, [pc, #144]	; (8005abc <_SendPacket+0x1c4>)
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	f7fa fbca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005a40:	f7ff f9fa 	bl	8004e38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a4a:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <_SendPacket+0x1c4>)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	60d3      	str	r3, [r2, #12]
 8005a50:	e00b      	b.n	8005a6a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005a52:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <_SendPacket+0x1c4>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4b18      	ldr	r3, [pc, #96]	; (8005abc <_SendPacket+0x1c4>)
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	e004      	b.n	8005a6a <_SendPacket+0x172>
    goto SendDone;
 8005a60:	bf00      	nop
 8005a62:	e002      	b.n	8005a6a <_SendPacket+0x172>
      goto SendDone;
 8005a64:	bf00      	nop
 8005a66:	e000      	b.n	8005a6a <_SendPacket+0x172>
      goto SendDone;
 8005a68:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <_SendPacket+0x1c4>)
 8005a6c:	7e1b      	ldrb	r3, [r3, #24]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4a14      	ldr	r2, [pc, #80]	; (8005ac4 <_SendPacket+0x1cc>)
 8005a72:	460b      	mov	r3, r1
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	440b      	add	r3, r1
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	336c      	adds	r3, #108	; 0x6c
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <_SendPacket+0x1c4>)
 8005a82:	7e1b      	ldrb	r3, [r3, #24]
 8005a84:	4618      	mov	r0, r3
 8005a86:	490f      	ldr	r1, [pc, #60]	; (8005ac4 <_SendPacket+0x1cc>)
 8005a88:	4603      	mov	r3, r0
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4403      	add	r3, r0
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	440b      	add	r3, r1
 8005a92:	3370      	adds	r3, #112	; 0x70
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d00b      	beq.n	8005ab2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <_SendPacket+0x1c4>)
 8005a9c:	789b      	ldrb	r3, [r3, #2]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d107      	bne.n	8005ab2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <_SendPacket+0x1c4>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005aa8:	f7ff fe40 	bl	800572c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005aac:	4b03      	ldr	r3, [pc, #12]	; (8005abc <_SendPacket+0x1c4>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ab2:	bf00      	nop
 8005ab4:	3728      	adds	r7, #40	; 0x28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20014264 	.word	0x20014264
 8005ac0:	e0001004 	.word	0xe0001004
 8005ac4:	20014404 	.word	0x20014404

08005ac8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	; 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	3301      	adds	r3, #1
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d80a      	bhi.n	8005af8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6051      	str	r1, [r2, #4]
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b80      	cmp	r3, #128	; 0x80
 8005afe:	d15a      	bne.n	8005bb6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	e00b      	b.n	8005b3a <_StoreChar+0x72>
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3e:	d8f0      	bhi.n	8005b22 <_StoreChar+0x5a>
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	627a      	str	r2, [r7, #36]	; 0x24
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e00b      	b.n	8005b72 <_StoreChar+0xaa>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	61f9      	str	r1, [r7, #28]
 8005b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b7f      	cmp	r3, #127	; 0x7f
 8005b76:	d8f0      	bhi.n	8005b5a <_StoreChar+0x92>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	61fa      	str	r2, [r7, #28]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	221a      	movs	r2, #26
 8005b8e:	6939      	ldr	r1, [r7, #16]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff feb1 	bl	80058f8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fdb9 	bl	8005712 <_PreparePacket>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3728      	adds	r7, #40	; 0x28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005bda:	e007      	b.n	8005bec <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	623b      	str	r3, [r7, #32]
    Width++;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	3301      	adds	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d2f3      	bcs.n	8005bdc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d901      	bls.n	8005c00 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11f      	bne.n	8005c4a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <_PrintUnsigned+0x66>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <_PrintUnsigned+0x66>
        c = '0';
 8005c20:	2330      	movs	r3, #48	; 0x30
 8005c22:	76fb      	strb	r3, [r7, #27]
 8005c24:	e001      	b.n	8005c2a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005c26:	2320      	movs	r3, #32
 8005c28:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c2a:	e007      	b.n	8005c3c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005c32:	7efb      	ldrb	r3, [r7, #27]
 8005c34:	4619      	mov	r1, r3
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff ff46 	bl	8005ac8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <_PrintUnsigned+0x8a>
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d3f0      	bcc.n	8005c2c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d903      	bls.n	8005c58 <_PrintUnsigned+0x98>
      NumDigits--;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	e009      	b.n	8005c6c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d200      	bcs.n	8005c6c <_PrintUnsigned+0xac>
        break;
 8005c6a:	e005      	b.n	8005c78 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005c76:	e7e8      	b.n	8005c4a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <_PrintUnsigned+0x128>)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4413      	add	r3, r2
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff14 	bl	8005ac8 <_StoreChar>
    Digit /= Base;
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e3      	bne.n	8005c78 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cc0:	e006      	b.n	8005cd0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005cc8:	2120      	movs	r1, #32
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff fefc 	bl	8005ac8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <_PrintUnsigned+0x11e>
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3f1      	bcc.n	8005cc2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	0800744c 	.word	0x0800744c

08005cec <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bfb8      	it	lt
 8005d00:	425b      	neglt	r3, r3
 8005d02:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005d08:	e007      	b.n	8005d1a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d12:	613b      	str	r3, [r7, #16]
    Width++;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	3301      	adds	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	daf3      	bge.n	8005d0a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d901      	bls.n	8005d2e <_PrintInt+0x42>
    Width = NumDigits;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <_PrintInt+0x5e>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	db04      	blt.n	8005d44 <_PrintInt+0x58>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <_PrintInt+0x5e>
    FieldWidth--;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <_PrintInt+0x6e>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <_PrintInt+0x9c>
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d111      	bne.n	8005d88 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00e      	beq.n	8005d88 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d6a:	e006      	b.n	8005d7a <_PrintInt+0x8e>
        FieldWidth--;
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005d72:	2120      	movs	r1, #32
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff fea7 	bl	8005ac8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <_PrintInt+0x9c>
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d3f1      	bcc.n	8005d6c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da07      	bge.n	8005d9e <_PrintInt+0xb2>
    v = -v;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	425b      	negs	r3, r3
 8005d92:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005d94:	212d      	movs	r1, #45	; 0x2d
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff fe96 	bl	8005ac8 <_StoreChar>
 8005d9c:	e008      	b.n	8005db0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005da8:	212b      	movs	r1, #43	; 0x2b
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff fe8c 	bl	8005ac8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d019      	beq.n	8005dee <_PrintInt+0x102>
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d114      	bne.n	8005dee <_PrintInt+0x102>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d111      	bne.n	8005dee <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dd0:	e006      	b.n	8005de0 <_PrintInt+0xf4>
        FieldWidth--;
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005dd8:	2130      	movs	r1, #48	; 0x30
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff fe74 	bl	8005ac8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <_PrintInt+0x102>
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3f1      	bcc.n	8005dd2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff fedf 	bl	8005bc0 <_PrintUnsigned>
}
 8005e02:	bf00      	nop
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b098      	sub	sp, #96	; 0x60
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e18:	f3ef 8311 	mrs	r3, BASEPRI
 8005e1c:	f04f 0120 	mov.w	r1, #32
 8005e20:	f381 8811 	msr	BASEPRI, r1
 8005e24:	633b      	str	r3, [r7, #48]	; 0x30
 8005e26:	48b7      	ldr	r0, [pc, #732]	; (8006104 <_VPrintTarget+0x2f8>)
 8005e28:	f7ff fc73 	bl	8005712 <_PreparePacket>
 8005e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005e2e:	4bb5      	ldr	r3, [pc, #724]	; (8006104 <_VPrintTarget+0x2f8>)
 8005e30:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005e52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 8183 	beq.w	8006162 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e60:	2b25      	cmp	r3, #37	; 0x25
 8005e62:	f040 8170 	bne.w	8006146 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005e66:	2300      	movs	r3, #0
 8005e68:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e7a:	3b23      	subs	r3, #35	; 0x23
 8005e7c:	2b0d      	cmp	r3, #13
 8005e7e:	d83f      	bhi.n	8005f00 <_VPrintTarget+0xf4>
 8005e80:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <_VPrintTarget+0x7c>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005f01 	.word	0x08005f01
 8005e90:	08005f01 	.word	0x08005f01
 8005e94:	08005f01 	.word	0x08005f01
 8005e98:	08005f01 	.word	0x08005f01
 8005e9c:	08005f01 	.word	0x08005f01
 8005ea0:	08005f01 	.word	0x08005f01
 8005ea4:	08005f01 	.word	0x08005f01
 8005ea8:	08005ee1 	.word	0x08005ee1
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005ec1 	.word	0x08005ec1
 8005eb4:	08005f01 	.word	0x08005f01
 8005eb8:	08005f01 	.word	0x08005f01
 8005ebc:	08005ed1 	.word	0x08005ed1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e01a      	b.n	8005f06 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed2:	f043 0302 	orr.w	r3, r3, #2
 8005ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	e012      	b.n	8005f06 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee2:	f043 0304 	orr.w	r3, r3, #4
 8005ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e00a      	b.n	8005f06 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef2:	f043 0308 	orr.w	r3, r3, #8
 8005ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e002      	b.n	8005f06 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005f00:	2300      	movs	r3, #0
 8005f02:	653b      	str	r3, [r7, #80]	; 0x50
 8005f04:	bf00      	nop
        }
      } while (v);
 8005f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1b0      	bne.n	8005e6e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f1e:	d912      	bls.n	8005f46 <_VPrintTarget+0x13a>
 8005f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f24:	2b39      	cmp	r3, #57	; 0x39
 8005f26:	d80e      	bhi.n	8005f46 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f3e:	4413      	add	r3, r2
 8005f40:	3b30      	subs	r3, #48	; 0x30
 8005f42:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005f44:	e7e4      	b.n	8005f10 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005f46:	2300      	movs	r3, #0
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005f52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f56:	2b2e      	cmp	r3, #46	; 0x2e
 8005f58:	d11d      	bne.n	8005f96 <_VPrintTarget+0x18a>
        sFormat++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005f68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f6c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f6e:	d912      	bls.n	8005f96 <_VPrintTarget+0x18a>
 8005f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f74:	2b39      	cmp	r3, #57	; 0x39
 8005f76:	d80e      	bhi.n	8005f96 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f8e:	4413      	add	r3, r2
 8005f90:	3b30      	subs	r3, #48	; 0x30
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005f94:	e7e4      	b.n	8005f60 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fa2:	2b6c      	cmp	r3, #108	; 0x6c
 8005fa4:	d003      	beq.n	8005fae <_VPrintTarget+0x1a2>
 8005fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005faa:	2b68      	cmp	r3, #104	; 0x68
 8005fac:	d107      	bne.n	8005fbe <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005fbc:	e7ef      	b.n	8005f9e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005fbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc2:	2b25      	cmp	r3, #37	; 0x25
 8005fc4:	f000 80b3 	beq.w	800612e <_VPrintTarget+0x322>
 8005fc8:	2b25      	cmp	r3, #37	; 0x25
 8005fca:	f2c0 80b7 	blt.w	800613c <_VPrintTarget+0x330>
 8005fce:	2b78      	cmp	r3, #120	; 0x78
 8005fd0:	f300 80b4 	bgt.w	800613c <_VPrintTarget+0x330>
 8005fd4:	2b58      	cmp	r3, #88	; 0x58
 8005fd6:	f2c0 80b1 	blt.w	800613c <_VPrintTarget+0x330>
 8005fda:	3b58      	subs	r3, #88	; 0x58
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	f200 80ad 	bhi.w	800613c <_VPrintTarget+0x330>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <_VPrintTarget+0x1dc>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	080060df 	.word	0x080060df
 8005fec:	0800613d 	.word	0x0800613d
 8005ff0:	0800613d 	.word	0x0800613d
 8005ff4:	0800613d 	.word	0x0800613d
 8005ff8:	0800613d 	.word	0x0800613d
 8005ffc:	0800613d 	.word	0x0800613d
 8006000:	0800613d 	.word	0x0800613d
 8006004:	0800613d 	.word	0x0800613d
 8006008:	0800613d 	.word	0x0800613d
 800600c:	0800613d 	.word	0x0800613d
 8006010:	0800613d 	.word	0x0800613d
 8006014:	0800606d 	.word	0x0800606d
 8006018:	08006093 	.word	0x08006093
 800601c:	0800613d 	.word	0x0800613d
 8006020:	0800613d 	.word	0x0800613d
 8006024:	0800613d 	.word	0x0800613d
 8006028:	0800613d 	.word	0x0800613d
 800602c:	0800613d 	.word	0x0800613d
 8006030:	0800613d 	.word	0x0800613d
 8006034:	0800613d 	.word	0x0800613d
 8006038:	0800613d 	.word	0x0800613d
 800603c:	0800613d 	.word	0x0800613d
 8006040:	0800613d 	.word	0x0800613d
 8006044:	0800613d 	.word	0x0800613d
 8006048:	08006109 	.word	0x08006109
 800604c:	0800613d 	.word	0x0800613d
 8006050:	0800613d 	.word	0x0800613d
 8006054:	0800613d 	.word	0x0800613d
 8006058:	0800613d 	.word	0x0800613d
 800605c:	080060b9 	.word	0x080060b9
 8006060:	0800613d 	.word	0x0800613d
 8006064:	0800613d 	.word	0x0800613d
 8006068:	080060df 	.word	0x080060df
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	1d19      	adds	r1, r3, #4
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6011      	str	r1, [r2, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800607a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006080:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fd1c 	bl	8005ac8 <_StoreChar>
        break;
 8006090:	e055      	b.n	800613e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	1d19      	adds	r1, r3, #4
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6011      	str	r1, [r2, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80060a0:	f107 0014 	add.w	r0, r7, #20
 80060a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	220a      	movs	r2, #10
 80060b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060b2:	f7ff fe1b 	bl	8005cec <_PrintInt>
        break;
 80060b6:	e042      	b.n	800613e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6011      	str	r1, [r2, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80060c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060c8:	f107 0014 	add.w	r0, r7, #20
 80060cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	220a      	movs	r2, #10
 80060d8:	f7ff fd72 	bl	8005bc0 <_PrintUnsigned>
        break;
 80060dc:	e02f      	b.n	800613e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1d19      	adds	r1, r3, #4
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6011      	str	r1, [r2, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80060ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060ee:	f107 0014 	add.w	r0, r7, #20
 80060f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fc:	2210      	movs	r2, #16
 80060fe:	f7ff fd5f 	bl	8005bc0 <_PrintUnsigned>
        break;
 8006102:	e01c      	b.n	800613e <_VPrintTarget+0x332>
 8006104:	20014294 	.word	0x20014294
      case 'p':
        v = va_arg(*pParamList, int);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006118:	f107 0014 	add.w	r0, r7, #20
 800611c:	2300      	movs	r3, #0
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	2308      	movs	r3, #8
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2308      	movs	r3, #8
 8006126:	2210      	movs	r2, #16
 8006128:	f7ff fd4a 	bl	8005bc0 <_PrintUnsigned>
        break;
 800612c:	e007      	b.n	800613e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800612e:	f107 0314 	add.w	r3, r7, #20
 8006132:	2125      	movs	r1, #37	; 0x25
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fcc7 	bl	8005ac8 <_StoreChar>
        break;
 800613a:	e000      	b.n	800613e <_VPrintTarget+0x332>
      default:
        break;
 800613c:	bf00      	nop
      }
      sFormat++;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e007      	b.n	8006156 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006146:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800614a:	f107 0314 	add.w	r3, r7, #20
 800614e:	4611      	mov	r1, r2
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fcb9 	bl	8005ac8 <_StoreChar>
    }
  } while (*sFormat);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f47f ae72 	bne.w	8005e44 <_VPrintTarget+0x38>
 8006160:	e000      	b.n	8006164 <_VPrintTarget+0x358>
      break;
 8006162:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d041      	beq.n	80061ee <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800616a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	643b      	str	r3, [r7, #64]	; 0x40
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617a:	e00b      	b.n	8006194 <_VPrintTarget+0x388>
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	b2da      	uxtb	r2, r3
 8006180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	6439      	str	r1, [r7, #64]	; 0x40
 8006186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006190:	09db      	lsrs	r3, r3, #7
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	2b7f      	cmp	r3, #127	; 0x7f
 8006198:	d8f0      	bhi.n	800617c <_VPrintTarget+0x370>
 800619a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	643a      	str	r2, [r7, #64]	; 0x40
 80061a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	e00b      	b.n	80061cc <_VPrintTarget+0x3c0>
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80061be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c8:	09db      	lsrs	r3, r3, #7
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	2b7f      	cmp	r3, #127	; 0x7f
 80061d0:	d8f0      	bhi.n	80061b4 <_VPrintTarget+0x3a8>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80061d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	69b9      	ldr	r1, [r7, #24]
 80061e6:	221a      	movs	r2, #26
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fb85 	bl	80058f8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80061f4:	bf00      	nop
 80061f6:	3758      	adds	r7, #88	; 0x58
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800620a:	2300      	movs	r3, #0
 800620c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006210:	4917      	ldr	r1, [pc, #92]	; (8006270 <SEGGER_SYSVIEW_Init+0x74>)
 8006212:	4818      	ldr	r0, [pc, #96]	; (8006274 <SEGGER_SYSVIEW_Init+0x78>)
 8006214:	f7ff f93c 	bl	8005490 <SEGGER_RTT_AllocUpBuffer>
 8006218:	4603      	mov	r3, r0
 800621a:	b2da      	uxtb	r2, r3
 800621c:	4b16      	ldr	r3, [pc, #88]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800621e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006220:	4b15      	ldr	r3, [pc, #84]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006222:	785a      	ldrb	r2, [r3, #1]
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006226:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006228:	4b13      	ldr	r3, [pc, #76]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800622a:	7e1b      	ldrb	r3, [r3, #24]
 800622c:	4618      	mov	r0, r3
 800622e:	2300      	movs	r3, #0
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	2308      	movs	r3, #8
 8006234:	4a11      	ldr	r2, [pc, #68]	; (800627c <SEGGER_SYSVIEW_Init+0x80>)
 8006236:	490f      	ldr	r1, [pc, #60]	; (8006274 <SEGGER_SYSVIEW_Init+0x78>)
 8006238:	f7ff f9ae 	bl	8005598 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800623c:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800623e:	2200      	movs	r2, #0
 8006240:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <SEGGER_SYSVIEW_Init+0x84>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006248:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800624a:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006250:	4a09      	ldr	r2, [pc, #36]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006256:	4a08      	ldr	r2, [pc, #32]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800625c:	4a06      	ldr	r2, [pc, #24]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <SEGGER_SYSVIEW_Init+0x7c>)
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	2001325c 	.word	0x2001325c
 8006274:	08007414 	.word	0x08007414
 8006278:	20014264 	.word	0x20014264
 800627c:	2001425c 	.word	0x2001425c
 8006280:	e0001004 	.word	0xe0001004

08006284 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800628c:	4a04      	ldr	r2, [pc, #16]	; (80062a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6113      	str	r3, [r2, #16]
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20014264 	.word	0x20014264

080062a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062ac:	f3ef 8311 	mrs	r3, BASEPRI
 80062b0:	f04f 0120 	mov.w	r1, #32
 80062b4:	f381 8811 	msr	BASEPRI, r1
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	4808      	ldr	r0, [pc, #32]	; (80062dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80062bc:	f7ff fa29 	bl	8005712 <_PreparePacket>
 80062c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	68b8      	ldr	r0, [r7, #8]
 80062c8:	f7ff fb16 	bl	80058f8 <_SendPacket>
  RECORD_END();
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f383 8811 	msr	BASEPRI, r3
}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20014294 	.word	0x20014294

080062e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062ea:	f3ef 8311 	mrs	r3, BASEPRI
 80062ee:	f04f 0120 	mov.w	r1, #32
 80062f2:	f381 8811 	msr	BASEPRI, r1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	4816      	ldr	r0, [pc, #88]	; (8006354 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80062fa:	f7ff fa0a 	bl	8005712 <_PreparePacket>
 80062fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	e00b      	b.n	8006326 <SEGGER_SYSVIEW_RecordU32+0x46>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	61f9      	str	r1, [r7, #28]
 8006318:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	09db      	lsrs	r3, r3, #7
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b7f      	cmp	r3, #127	; 0x7f
 800632a:	d8f0      	bhi.n	800630e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	61fa      	str	r2, [r7, #28]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	6938      	ldr	r0, [r7, #16]
 8006342:	f7ff fad9 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f383 8811 	msr	BASEPRI, r3
}
 800634c:	bf00      	nop
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20014294 	.word	0x20014294

08006358 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b08c      	sub	sp, #48	; 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006364:	f3ef 8311 	mrs	r3, BASEPRI
 8006368:	f04f 0120 	mov.w	r1, #32
 800636c:	f381 8811 	msr	BASEPRI, r1
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	4825      	ldr	r0, [pc, #148]	; (8006408 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006374:	f7ff f9cd 	bl	8005712 <_PreparePacket>
 8006378:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28
 8006386:	e00b      	b.n	80063a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	b2da      	uxtb	r2, r3
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	09db      	lsrs	r3, r3, #7
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	2b7f      	cmp	r3, #127	; 0x7f
 80063a4:	d8f0      	bhi.n	8006388 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	e00b      	b.n	80063d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	1c59      	adds	r1, r3, #1
 80063c8:	6279      	str	r1, [r7, #36]	; 0x24
 80063ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	09db      	lsrs	r3, r3, #7
 80063d6:	623b      	str	r3, [r7, #32]
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b7f      	cmp	r3, #127	; 0x7f
 80063dc:	d8f0      	bhi.n	80063c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	627a      	str	r2, [r7, #36]	; 0x24
 80063e4:	6a3a      	ldr	r2, [r7, #32]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	69b8      	ldr	r0, [r7, #24]
 80063f4:	f7ff fa80 	bl	80058f8 <_SendPacket>
  RECORD_END();
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f383 8811 	msr	BASEPRI, r3
}
 80063fe:	bf00      	nop
 8006400:	3730      	adds	r7, #48	; 0x30
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20014294 	.word	0x20014294

0800640c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b08e      	sub	sp, #56	; 0x38
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800641a:	f3ef 8311 	mrs	r3, BASEPRI
 800641e:	f04f 0120 	mov.w	r1, #32
 8006422:	f381 8811 	msr	BASEPRI, r1
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	4832      	ldr	r0, [pc, #200]	; (80064f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800642a:	f7ff f972 	bl	8005712 <_PreparePacket>
 800642e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
 800643c:	e00b      	b.n	8006456 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	b2da      	uxtb	r2, r3
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	1c59      	adds	r1, r3, #1
 8006446:	6379      	str	r1, [r7, #52]	; 0x34
 8006448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	09db      	lsrs	r3, r3, #7
 8006454:	633b      	str	r3, [r7, #48]	; 0x30
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	2b7f      	cmp	r3, #127	; 0x7f
 800645a:	d8f0      	bhi.n	800643e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	637a      	str	r2, [r7, #52]	; 0x34
 8006462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
 8006474:	e00b      	b.n	800648e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	b2da      	uxtb	r2, r3
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	1c59      	adds	r1, r3, #1
 800647e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	09db      	lsrs	r3, r3, #7
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	2b7f      	cmp	r3, #127	; 0x7f
 8006492:	d8f0      	bhi.n	8006476 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800649a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	623b      	str	r3, [r7, #32]
 80064ac:	e00b      	b.n	80064c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	1c59      	adds	r1, r3, #1
 80064b6:	6279      	str	r1, [r7, #36]	; 0x24
 80064b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	09db      	lsrs	r3, r3, #7
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ca:	d8f0      	bhi.n	80064ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	627a      	str	r2, [r7, #36]	; 0x24
 80064d2:	6a3a      	ldr	r2, [r7, #32]
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	6979      	ldr	r1, [r7, #20]
 80064e0:	69b8      	ldr	r0, [r7, #24]
 80064e2:	f7ff fa09 	bl	80058f8 <_SendPacket>
  RECORD_END();
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f383 8811 	msr	BASEPRI, r3
}
 80064ec:	bf00      	nop
 80064ee:	3738      	adds	r7, #56	; 0x38
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20014294 	.word	0x20014294

080064f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b090      	sub	sp, #64	; 0x40
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006506:	f3ef 8311 	mrs	r3, BASEPRI
 800650a:	f04f 0120 	mov.w	r1, #32
 800650e:	f381 8811 	msr	BASEPRI, r1
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	4840      	ldr	r0, [pc, #256]	; (8006618 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006516:	f7ff f8fc 	bl	8005712 <_PreparePacket>
 800651a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
 8006528:	e00b      	b.n	8006542 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	b2da      	uxtb	r2, r3
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	1c59      	adds	r1, r3, #1
 8006532:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	09db      	lsrs	r3, r3, #7
 8006540:	63bb      	str	r3, [r7, #56]	; 0x38
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	2b7f      	cmp	r3, #127	; 0x7f
 8006546:	d8f0      	bhi.n	800652a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800654e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006556:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
 8006560:	e00b      	b.n	800657a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	b2da      	uxtb	r2, r3
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	1c59      	adds	r1, r3, #1
 800656a:	6379      	str	r1, [r7, #52]	; 0x34
 800656c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	09db      	lsrs	r3, r3, #7
 8006578:	633b      	str	r3, [r7, #48]	; 0x30
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	2b7f      	cmp	r3, #127	; 0x7f
 800657e:	d8f0      	bhi.n	8006562 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	637a      	str	r2, [r7, #52]	; 0x34
 8006586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
 8006598:	e00b      	b.n	80065b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	b2da      	uxtb	r2, r3
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	1c59      	adds	r1, r3, #1
 80065a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	09db      	lsrs	r3, r3, #7
 80065b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	2b7f      	cmp	r3, #127	; 0x7f
 80065b6:	d8f0      	bhi.n	800659a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
 80065cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ce:	623b      	str	r3, [r7, #32]
 80065d0:	e00b      	b.n	80065ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	1c59      	adds	r1, r3, #1
 80065da:	6279      	str	r1, [r7, #36]	; 0x24
 80065dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	09db      	lsrs	r3, r3, #7
 80065e8:	623b      	str	r3, [r7, #32]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2b7f      	cmp	r3, #127	; 0x7f
 80065ee:	d8f0      	bhi.n	80065d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	627a      	str	r2, [r7, #36]	; 0x24
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	6979      	ldr	r1, [r7, #20]
 8006604:	69b8      	ldr	r0, [r7, #24]
 8006606:	f7ff f977 	bl	80058f8 <_SendPacket>
  RECORD_END();
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f383 8811 	msr	BASEPRI, r3
}
 8006610:	bf00      	nop
 8006612:	3740      	adds	r7, #64	; 0x40
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20014294 	.word	0x20014294

0800661c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800661c:	b580      	push	{r7, lr}
 800661e:	b08c      	sub	sp, #48	; 0x30
 8006620:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006622:	4b59      	ldr	r3, [pc, #356]	; (8006788 <SEGGER_SYSVIEW_Start+0x16c>)
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006628:	f3ef 8311 	mrs	r3, BASEPRI
 800662c:	f04f 0120 	mov.w	r1, #32
 8006630:	f381 8811 	msr	BASEPRI, r1
 8006634:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006636:	4b54      	ldr	r3, [pc, #336]	; (8006788 <SEGGER_SYSVIEW_Start+0x16c>)
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	220a      	movs	r2, #10
 800663c:	4953      	ldr	r1, [pc, #332]	; (800678c <SEGGER_SYSVIEW_Start+0x170>)
 800663e:	4618      	mov	r0, r3
 8006640:	f7f9 fdc6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800664a:	f7fe fbf5 	bl	8004e38 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800664e:	200a      	movs	r0, #10
 8006650:	f7ff fe28 	bl	80062a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006654:	f3ef 8311 	mrs	r3, BASEPRI
 8006658:	f04f 0120 	mov.w	r1, #32
 800665c:	f381 8811 	msr	BASEPRI, r1
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	484b      	ldr	r0, [pc, #300]	; (8006790 <SEGGER_SYSVIEW_Start+0x174>)
 8006664:	f7ff f855 	bl	8005712 <_PreparePacket>
 8006668:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006672:	4b45      	ldr	r3, [pc, #276]	; (8006788 <SEGGER_SYSVIEW_Start+0x16c>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
 8006678:	e00b      	b.n	8006692 <SEGGER_SYSVIEW_Start+0x76>
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	b2da      	uxtb	r2, r3
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	1c59      	adds	r1, r3, #1
 8006682:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006684:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	09db      	lsrs	r3, r3, #7
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	2b7f      	cmp	r3, #127	; 0x7f
 8006696:	d8f0      	bhi.n	800667a <SEGGER_SYSVIEW_Start+0x5e>
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800669e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
 80066ac:	4b36      	ldr	r3, [pc, #216]	; (8006788 <SEGGER_SYSVIEW_Start+0x16c>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	e00b      	b.n	80066cc <SEGGER_SYSVIEW_Start+0xb0>
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	6279      	str	r1, [r7, #36]	; 0x24
 80066be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	09db      	lsrs	r3, r3, #7
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b7f      	cmp	r3, #127	; 0x7f
 80066d0:	d8f0      	bhi.n	80066b4 <SEGGER_SYSVIEW_Start+0x98>
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	627a      	str	r2, [r7, #36]	; 0x24
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	4b28      	ldr	r3, [pc, #160]	; (8006788 <SEGGER_SYSVIEW_Start+0x16c>)
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	e00b      	b.n	8006706 <SEGGER_SYSVIEW_Start+0xea>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	1c59      	adds	r1, r3, #1
 80066f6:	61f9      	str	r1, [r7, #28]
 80066f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	09db      	lsrs	r3, r3, #7
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b7f      	cmp	r3, #127	; 0x7f
 800670a:	d8f0      	bhi.n	80066ee <SEGGER_SYSVIEW_Start+0xd2>
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	61fa      	str	r2, [r7, #28]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	e00b      	b.n	800673e <SEGGER_SYSVIEW_Start+0x122>
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	6179      	str	r1, [r7, #20]
 8006730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	09db      	lsrs	r3, r3, #7
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b7f      	cmp	r3, #127	; 0x7f
 8006742:	d8f0      	bhi.n	8006726 <SEGGER_SYSVIEW_Start+0x10a>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	617a      	str	r2, [r7, #20]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006754:	2218      	movs	r2, #24
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff f8cd 	bl	80058f8 <_SendPacket>
      RECORD_END();
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006764:	4b08      	ldr	r3, [pc, #32]	; (8006788 <SEGGER_SYSVIEW_Start+0x16c>)
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <SEGGER_SYSVIEW_Start+0x16c>)
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006772:	f000 f9eb 	bl	8006b4c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006776:	f000 f9b1 	bl	8006adc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800677a:	f000 fc83 	bl	8007084 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800677e:	bf00      	nop
 8006780:	3730      	adds	r7, #48	; 0x30
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20014264 	.word	0x20014264
 800678c:	08007440 	.word	0x08007440
 8006790:	20014294 	.word	0x20014294

08006794 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800679a:	f3ef 8311 	mrs	r3, BASEPRI
 800679e:	f04f 0120 	mov.w	r1, #32
 80067a2:	f381 8811 	msr	BASEPRI, r1
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	480b      	ldr	r0, [pc, #44]	; (80067d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80067aa:	f7fe ffb2 	bl	8005712 <_PreparePacket>
 80067ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <SEGGER_SYSVIEW_Stop+0x48>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80067b8:	220b      	movs	r2, #11
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6838      	ldr	r0, [r7, #0]
 80067be:	f7ff f89b 	bl	80058f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <SEGGER_SYSVIEW_Stop+0x48>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20014294 	.word	0x20014294
 80067dc:	20014264 	.word	0x20014264

080067e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08c      	sub	sp, #48	; 0x30
 80067e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067e6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ea:	f04f 0120 	mov.w	r1, #32
 80067ee:	f381 8811 	msr	BASEPRI, r1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	4845      	ldr	r0, [pc, #276]	; (800690c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80067f6:	f7fe ff8c 	bl	8005712 <_PreparePacket>
 80067fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006804:	4b42      	ldr	r3, [pc, #264]	; (8006910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
 800680a:	e00b      	b.n	8006824 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	b2da      	uxtb	r2, r3
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	1c59      	adds	r1, r3, #1
 8006814:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	09db      	lsrs	r3, r3, #7
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	2b7f      	cmp	r3, #127	; 0x7f
 8006828:	d8f0      	bhi.n	800680c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
 800683e:	4b34      	ldr	r3, [pc, #208]	; (8006910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	6279      	str	r1, [r7, #36]	; 0x24
 8006850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	627a      	str	r2, [r7, #36]	; 0x24
 800686a:	6a3a      	ldr	r2, [r7, #32]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	e00b      	b.n	8006898 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	1c59      	adds	r1, r3, #1
 8006888:	61f9      	str	r1, [r7, #28]
 800688a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	09db      	lsrs	r3, r3, #7
 8006896:	61bb      	str	r3, [r7, #24]
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b7f      	cmp	r3, #127	; 0x7f
 800689c:	d8f0      	bhi.n	8006880 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	61fa      	str	r2, [r7, #28]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	e00b      	b.n	80068d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	6179      	str	r1, [r7, #20]
 80068c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	09db      	lsrs	r3, r3, #7
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b7f      	cmp	r3, #127	; 0x7f
 80068d4:	d8f0      	bhi.n	80068b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	617a      	str	r2, [r7, #20]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068e6:	2218      	movs	r2, #24
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	68b8      	ldr	r0, [r7, #8]
 80068ec:	f7ff f804 	bl	80058f8 <_SendPacket>
  RECORD_END();
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80068fe:	4b04      	ldr	r3, [pc, #16]	; (8006910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	4798      	blx	r3
  }
}
 8006904:	bf00      	nop
 8006906:	3730      	adds	r7, #48	; 0x30
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20014294 	.word	0x20014294
 8006910:	20014264 	.word	0x20014264

08006914 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b092      	sub	sp, #72	; 0x48
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800691c:	f3ef 8311 	mrs	r3, BASEPRI
 8006920:	f04f 0120 	mov.w	r1, #32
 8006924:	f381 8811 	msr	BASEPRI, r1
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	486a      	ldr	r0, [pc, #424]	; (8006ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800692c:	f7fe fef1 	bl	8005712 <_PreparePacket>
 8006930:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	647b      	str	r3, [r7, #68]	; 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b66      	ldr	r3, [pc, #408]	; (8006ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	643b      	str	r3, [r7, #64]	; 0x40
 8006946:	e00b      	b.n	8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694a:	b2da      	uxtb	r2, r3
 800694c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	6479      	str	r1, [r7, #68]	; 0x44
 8006952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695c:	09db      	lsrs	r3, r3, #7
 800695e:	643b      	str	r3, [r7, #64]	; 0x40
 8006960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006962:	2b7f      	cmp	r3, #127	; 0x7f
 8006964:	d8f0      	bhi.n	8006948 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	647a      	str	r2, [r7, #68]	; 0x44
 800696c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006974:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006980:	e00b      	b.n	800699a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	b2da      	uxtb	r2, r3
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	1c59      	adds	r1, r3, #1
 800698a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800698c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	09db      	lsrs	r3, r3, #7
 8006998:	63bb      	str	r3, [r7, #56]	; 0x38
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b7f      	cmp	r3, #127	; 0x7f
 800699e:	d8f0      	bhi.n	8006982 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	4619      	mov	r1, r3
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f7fe fe5d 	bl	8005678 <_EncodeStr>
 80069be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80069c0:	2209      	movs	r2, #9
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	6938      	ldr	r0, [r7, #16]
 80069c6:	f7fe ff97 	bl	80058f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b40      	ldr	r3, [pc, #256]	; (8006ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	633b      	str	r3, [r7, #48]	; 0x30
 80069de:	e00b      	b.n	80069f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e6:	1c59      	adds	r1, r3, #1
 80069e8:	6379      	str	r1, [r7, #52]	; 0x34
 80069ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	09db      	lsrs	r3, r3, #7
 80069f6:	633b      	str	r3, [r7, #48]	; 0x30
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	2b7f      	cmp	r3, #127	; 0x7f
 80069fc:	d8f0      	bhi.n	80069e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80069fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	637a      	str	r2, [r7, #52]	; 0x34
 8006a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a18:	e00b      	b.n	8006a32 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	1c59      	adds	r1, r3, #1
 8006a22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	09db      	lsrs	r3, r3, #7
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	2b7f      	cmp	r3, #127	; 0x7f
 8006a36:	d8f0      	bhi.n	8006a1a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	623b      	str	r3, [r7, #32]
 8006a52:	e00b      	b.n	8006a6c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	1c59      	adds	r1, r3, #1
 8006a5c:	6279      	str	r1, [r7, #36]	; 0x24
 8006a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	09db      	lsrs	r3, r3, #7
 8006a6a:	623b      	str	r3, [r7, #32]
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a70:	d8f0      	bhi.n	8006a54 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	627a      	str	r2, [r7, #36]	; 0x24
 8006a78:	6a3a      	ldr	r2, [r7, #32]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e00b      	b.n	8006aa4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1c59      	adds	r1, r3, #1
 8006a94:	61f9      	str	r1, [r7, #28]
 8006a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	09db      	lsrs	r3, r3, #7
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa8:	d8f0      	bhi.n	8006a8c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	61fa      	str	r2, [r7, #28]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006aba:	2215      	movs	r2, #21
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	6938      	ldr	r0, [r7, #16]
 8006ac0:	f7fe ff1a 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f383 8811 	msr	BASEPRI, r3
}
 8006aca:	bf00      	nop
 8006acc:	3748      	adds	r7, #72	; 0x48
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20014294 	.word	0x20014294
 8006ad8:	20014264 	.word	0x20014264

08006adc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006af2:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4798      	blx	r3
  }
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20014264 	.word	0x20014264

08006b04 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b10:	f04f 0120 	mov.w	r1, #32
 8006b14:	f381 8811 	msr	BASEPRI, r1
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	480b      	ldr	r0, [pc, #44]	; (8006b48 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b1c:	f7fe fdf9 	bl	8005712 <_PreparePacket>
 8006b20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b22:	2280      	movs	r2, #128	; 0x80
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	6938      	ldr	r0, [r7, #16]
 8006b28:	f7fe fda6 	bl	8005678 <_EncodeStr>
 8006b2c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b2e:	220e      	movs	r2, #14
 8006b30:	68f9      	ldr	r1, [r7, #12]
 8006b32:	6938      	ldr	r0, [r7, #16]
 8006b34:	f7fe fee0 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f383 8811 	msr	BASEPRI, r3
}
 8006b3e:	bf00      	nop
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20014294 	.word	0x20014294

08006b4c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006b4c:	b590      	push	{r4, r7, lr}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01a      	beq.n	8006b90 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d015      	beq.n	8006b90 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4798      	blx	r3
 8006b6c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b70:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	000a      	movs	r2, r1
 8006b80:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b82:	4613      	mov	r3, r2
 8006b84:	461a      	mov	r2, r3
 8006b86:	4621      	mov	r1, r4
 8006b88:	200d      	movs	r0, #13
 8006b8a:	f7ff fbe5 	bl	8006358 <SEGGER_SYSVIEW_RecordU32x2>
 8006b8e:	e006      	b.n	8006b9e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4619      	mov	r1, r3
 8006b96:	200c      	movs	r0, #12
 8006b98:	f7ff fba2 	bl	80062e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd90      	pop	{r4, r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20014264 	.word	0x20014264
 8006bac:	e0001004 	.word	0xe0001004

08006bb0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bba:	f04f 0120 	mov.w	r1, #32
 8006bbe:	f381 8811 	msr	BASEPRI, r1
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	4819      	ldr	r0, [pc, #100]	; (8006c2c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006bc6:	f7fe fda4 	bl	8005712 <_PreparePacket>
 8006bca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	e00b      	b.n	8006bfc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	1c59      	adds	r1, r3, #1
 8006bec:	6179      	str	r1, [r7, #20]
 8006bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	09db      	lsrs	r3, r3, #7
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8006c00:	d8f0      	bhi.n	8006be4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	617a      	str	r2, [r7, #20]
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c12:	2202      	movs	r2, #2
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	68b8      	ldr	r0, [r7, #8]
 8006c18:	f7fe fe6e 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f383 8811 	msr	BASEPRI, r3
}
 8006c22:	bf00      	nop
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20014294 	.word	0x20014294
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c3e:	f04f 0120 	mov.w	r1, #32
 8006c42:	f381 8811 	msr	BASEPRI, r1
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	4807      	ldr	r0, [pc, #28]	; (8006c68 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006c4a:	f7fe fd62 	bl	8005712 <_PreparePacket>
 8006c4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006c50:	2203      	movs	r2, #3
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6838      	ldr	r0, [r7, #0]
 8006c56:	f7fe fe4f 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f383 8811 	msr	BASEPRI, r3
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20014294 	.word	0x20014294

08006c6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c72:	f3ef 8311 	mrs	r3, BASEPRI
 8006c76:	f04f 0120 	mov.w	r1, #32
 8006c7a:	f381 8811 	msr	BASEPRI, r1
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	4807      	ldr	r0, [pc, #28]	; (8006ca0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c82:	f7fe fd46 	bl	8005712 <_PreparePacket>
 8006c86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c88:	2212      	movs	r2, #18
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6838      	ldr	r0, [r7, #0]
 8006c8e:	f7fe fe33 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20014294 	.word	0x20014294

08006ca4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006caa:	f3ef 8311 	mrs	r3, BASEPRI
 8006cae:	f04f 0120 	mov.w	r1, #32
 8006cb2:	f381 8811 	msr	BASEPRI, r1
 8006cb6:	607b      	str	r3, [r7, #4]
 8006cb8:	4807      	ldr	r0, [pc, #28]	; (8006cd8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006cba:	f7fe fd2a 	bl	8005712 <_PreparePacket>
 8006cbe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006cc0:	2211      	movs	r2, #17
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6838      	ldr	r0, [r7, #0]
 8006cc6:	f7fe fe17 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f383 8811 	msr	BASEPRI, r3
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20014294 	.word	0x20014294

08006cdc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce8:	f04f 0120 	mov.w	r1, #32
 8006cec:	f381 8811 	msr	BASEPRI, r1
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	4819      	ldr	r0, [pc, #100]	; (8006d58 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006cf4:	f7fe fd0d 	bl	8005712 <_PreparePacket>
 8006cf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cfe:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e00b      	b.n	8006d2a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	61f9      	str	r1, [r7, #28]
 8006d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	09db      	lsrs	r3, r3, #7
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2e:	d8f0      	bhi.n	8006d12 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	61fa      	str	r2, [r7, #28]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006d40:	2208      	movs	r2, #8
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	6938      	ldr	r0, [r7, #16]
 8006d46:	f7fe fdd7 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f383 8811 	msr	BASEPRI, r3
}
 8006d50:	bf00      	nop
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20014294 	.word	0x20014294
 8006d5c:	20014264 	.word	0x20014264

08006d60 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d68:	f3ef 8311 	mrs	r3, BASEPRI
 8006d6c:	f04f 0120 	mov.w	r1, #32
 8006d70:	f381 8811 	msr	BASEPRI, r1
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	4819      	ldr	r0, [pc, #100]	; (8006ddc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006d78:	f7fe fccb 	bl	8005712 <_PreparePacket>
 8006d7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d82:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	e00b      	b.n	8006dae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	1c59      	adds	r1, r3, #1
 8006d9e:	61f9      	str	r1, [r7, #28]
 8006da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	09db      	lsrs	r3, r3, #7
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b7f      	cmp	r3, #127	; 0x7f
 8006db2:	d8f0      	bhi.n	8006d96 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	61fa      	str	r2, [r7, #28]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	6938      	ldr	r0, [r7, #16]
 8006dca:	f7fe fd95 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f383 8811 	msr	BASEPRI, r3
}
 8006dd4:	bf00      	nop
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20014294 	.word	0x20014294
 8006de0:	20014264 	.word	0x20014264

08006de4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006dec:	f3ef 8311 	mrs	r3, BASEPRI
 8006df0:	f04f 0120 	mov.w	r1, #32
 8006df4:	f381 8811 	msr	BASEPRI, r1
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	4819      	ldr	r0, [pc, #100]	; (8006e60 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006dfc:	f7fe fc89 	bl	8005712 <_PreparePacket>
 8006e00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e06:	4b17      	ldr	r3, [pc, #92]	; (8006e64 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e00b      	b.n	8006e32 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	1c59      	adds	r1, r3, #1
 8006e22:	61f9      	str	r1, [r7, #28]
 8006e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	09db      	lsrs	r3, r3, #7
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b7f      	cmp	r3, #127	; 0x7f
 8006e36:	d8f0      	bhi.n	8006e1a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	61fa      	str	r2, [r7, #28]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006e48:	2206      	movs	r2, #6
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	6938      	ldr	r0, [r7, #16]
 8006e4e:	f7fe fd53 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f383 8811 	msr	BASEPRI, r3
}
 8006e58:	bf00      	nop
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20014294 	.word	0x20014294
 8006e64:	20014264 	.word	0x20014264

08006e68 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e72:	f3ef 8311 	mrs	r3, BASEPRI
 8006e76:	f04f 0120 	mov.w	r1, #32
 8006e7a:	f381 8811 	msr	BASEPRI, r1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	4827      	ldr	r0, [pc, #156]	; (8006f20 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006e82:	f7fe fc46 	bl	8005712 <_PreparePacket>
 8006e86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e8c:	4b25      	ldr	r3, [pc, #148]	; (8006f24 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	e00b      	b.n	8006eb8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	1c59      	adds	r1, r3, #1
 8006ea8:	6279      	str	r1, [r7, #36]	; 0x24
 8006eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	09db      	lsrs	r3, r3, #7
 8006eb6:	623b      	str	r3, [r7, #32]
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	2b7f      	cmp	r3, #127	; 0x7f
 8006ebc:	d8f0      	bhi.n	8006ea0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ec4:	6a3a      	ldr	r2, [r7, #32]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	e00b      	b.n	8006ef0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	61f9      	str	r1, [r7, #28]
 8006ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	09db      	lsrs	r3, r3, #7
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef4:	d8f0      	bhi.n	8006ed8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	61fa      	str	r2, [r7, #28]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006f06:	2207      	movs	r2, #7
 8006f08:	68f9      	ldr	r1, [r7, #12]
 8006f0a:	6938      	ldr	r0, [r7, #16]
 8006f0c:	f7fe fcf4 	bl	80058f8 <_SendPacket>
  RECORD_END();
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f383 8811 	msr	BASEPRI, r3
}
 8006f16:	bf00      	nop
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20014294 	.word	0x20014294
 8006f24:	20014264 	.word	0x20014264

08006f28 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	1ad3      	subs	r3, r2, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	20014264 	.word	0x20014264

08006f48 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08c      	sub	sp, #48	; 0x30
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006f52:	4b3b      	ldr	r3, [pc, #236]	; (8007040 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d06d      	beq.n	8007036 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006f5a:	4b39      	ldr	r3, [pc, #228]	; (8007040 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006f60:	2300      	movs	r3, #0
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f64:	e008      	b.n	8006f78 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	3301      	adds	r3, #1
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d3f2      	bcc.n	8006f66 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006f80:	e000      	b.n	8006f84 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006f82:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d055      	beq.n	8007036 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f8e:	f04f 0120 	mov.w	r1, #32
 8006f92:	f381 8811 	msr	BASEPRI, r1
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	482a      	ldr	r0, [pc, #168]	; (8007044 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006f9a:	f7fe fbba 	bl	8005712 <_PreparePacket>
 8006f9e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	623b      	str	r3, [r7, #32]
 8006fac:	e00b      	b.n	8006fc6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	1c59      	adds	r1, r3, #1
 8006fb6:	6279      	str	r1, [r7, #36]	; 0x24
 8006fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	09db      	lsrs	r3, r3, #7
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006fca:	d8f0      	bhi.n	8006fae <SEGGER_SYSVIEW_SendModule+0x66>
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd2:	6a3a      	ldr	r2, [r7, #32]
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	e00b      	b.n	8007000 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	61f9      	str	r1, [r7, #28]
 8006ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	09db      	lsrs	r3, r3, #7
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b7f      	cmp	r3, #127	; 0x7f
 8007004:	d8f0      	bhi.n	8006fe8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	61fa      	str	r2, [r7, #28]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2280      	movs	r2, #128	; 0x80
 800701c:	4619      	mov	r1, r3
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7fe fb2a 	bl	8005678 <_EncodeStr>
 8007024:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007026:	2216      	movs	r2, #22
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f7fe fc64 	bl	80058f8 <_SendPacket>
      RECORD_END();
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007036:	bf00      	nop
 8007038:	3730      	adds	r7, #48	; 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2001428c 	.word	0x2001428c
 8007044:	20014294 	.word	0x20014294

08007048 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00f      	beq.n	8007076 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f2      	bne.n	800705c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	2001428c 	.word	0x2001428c

08007084 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800708a:	f3ef 8311 	mrs	r3, BASEPRI
 800708e:	f04f 0120 	mov.w	r1, #32
 8007092:	f381 8811 	msr	BASEPRI, r1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	4817      	ldr	r0, [pc, #92]	; (80070f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800709a:	f7fe fb3a 	bl	8005712 <_PreparePacket>
 800709e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	4b14      	ldr	r3, [pc, #80]	; (80070fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e00b      	b.n	80070c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	6179      	str	r1, [r7, #20]
 80070ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	09db      	lsrs	r3, r3, #7
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b7f      	cmp	r3, #127	; 0x7f
 80070cc:	d8f0      	bhi.n	80070b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	617a      	str	r2, [r7, #20]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80070de:	221b      	movs	r2, #27
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f7fe fc08 	bl	80058f8 <_SendPacket>
  RECORD_END();
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f383 8811 	msr	BASEPRI, r3
}
 80070ee:	bf00      	nop
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20014294 	.word	0x20014294
 80070fc:	20014290 	.word	0x20014290

08007100 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007100:	b40f      	push	{r0, r1, r2, r3}
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007108:	f107 0314 	add.w	r3, r7, #20
 800710c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800710e:	1d3b      	adds	r3, r7, #4
 8007110:	461a      	mov	r2, r3
 8007112:	2100      	movs	r1, #0
 8007114:	6938      	ldr	r0, [r7, #16]
 8007116:	f7fe fe79 	bl	8005e0c <_VPrintTarget>
  va_end(ParamList);
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007124:	b004      	add	sp, #16
 8007126:	4770      	bx	lr

08007128 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	; 0x28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007130:	f3ef 8311 	mrs	r3, BASEPRI
 8007134:	f04f 0120 	mov.w	r1, #32
 8007138:	f381 8811 	msr	BASEPRI, r1
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	4827      	ldr	r0, [pc, #156]	; (80071dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007140:	f7fe fae7 	bl	8005712 <_PreparePacket>
 8007144:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	6938      	ldr	r0, [r7, #16]
 800714c:	f7fe fa94 	bl	8005678 <_EncodeStr>
 8007150:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
 8007156:	2301      	movs	r3, #1
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	e00b      	b.n	8007174 <SEGGER_SYSVIEW_Warn+0x4c>
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	1c59      	adds	r1, r3, #1
 8007164:	6279      	str	r1, [r7, #36]	; 0x24
 8007166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	09db      	lsrs	r3, r3, #7
 8007172:	623b      	str	r3, [r7, #32]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	2b7f      	cmp	r3, #127	; 0x7f
 8007178:	d8f0      	bhi.n	800715c <SEGGER_SYSVIEW_Warn+0x34>
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	627a      	str	r2, [r7, #36]	; 0x24
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	2300      	movs	r3, #0
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	e00b      	b.n	80071ac <SEGGER_SYSVIEW_Warn+0x84>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	1c59      	adds	r1, r3, #1
 800719c:	61f9      	str	r1, [r7, #28]
 800719e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	09db      	lsrs	r3, r3, #7
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	2b7f      	cmp	r3, #127	; 0x7f
 80071b0:	d8f0      	bhi.n	8007194 <SEGGER_SYSVIEW_Warn+0x6c>
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	61fa      	str	r2, [r7, #28]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80071c2:	221a      	movs	r2, #26
 80071c4:	68f9      	ldr	r1, [r7, #12]
 80071c6:	6938      	ldr	r0, [r7, #16]
 80071c8:	f7fe fb96 	bl	80058f8 <_SendPacket>
  RECORD_END();
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f383 8811 	msr	BASEPRI, r3
}
 80071d2:	bf00      	nop
 80071d4:	3728      	adds	r7, #40	; 0x28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20014294 	.word	0x20014294

080071e0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80071e6:	7e1b      	ldrb	r3, [r3, #24]
 80071e8:	4619      	mov	r1, r3
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80071ec:	460b      	mov	r3, r1
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	440b      	add	r3, r1
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	4413      	add	r3, r2
 80071f6:	336c      	adds	r3, #108	; 0x6c
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80071fc:	7e1b      	ldrb	r3, [r3, #24]
 80071fe:	4618      	mov	r0, r3
 8007200:	490d      	ldr	r1, [pc, #52]	; (8007238 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007202:	4603      	mov	r3, r0
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	4403      	add	r3, r0
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	440b      	add	r3, r1
 800720c:	3370      	adds	r3, #112	; 0x70
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d00b      	beq.n	800722c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007214:	4b07      	ldr	r3, [pc, #28]	; (8007234 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007216:	789b      	ldrb	r3, [r3, #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d107      	bne.n	800722c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800721e:	2201      	movs	r2, #1
 8007220:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007222:	f7fe fa83 	bl	800572c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007226:	4b03      	ldr	r3, [pc, #12]	; (8007234 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007228:	2200      	movs	r2, #0
 800722a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800722c:	4b01      	ldr	r3, [pc, #4]	; (8007234 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800722e:	781b      	ldrb	r3, [r3, #0]
}
 8007230:	4618      	mov	r0, r3
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20014264 	.word	0x20014264
 8007238:	20014404 	.word	0x20014404

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4d0d      	ldr	r5, [pc, #52]	; (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <__libc_init_array+0x3c>)
 8007242:	1b64      	subs	r4, r4, r5
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2600      	movs	r6, #0
 8007248:	42a6      	cmp	r6, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4d0b      	ldr	r5, [pc, #44]	; (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <__libc_init_array+0x44>)
 8007250:	f000 f83c 	bl	80072cc <_init>
 8007254:	1b64      	subs	r4, r4, r5
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2600      	movs	r6, #0
 800725a:	42a6      	cmp	r6, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f855 3b04 	ldr.w	r3, [r5], #4
 8007264:	4798      	blx	r3
 8007266:	3601      	adds	r6, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f855 3b04 	ldr.w	r3, [r5], #4
 800726e:	4798      	blx	r3
 8007270:	3601      	adds	r6, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	08007464 	.word	0x08007464
 8007278:	08007464 	.word	0x08007464
 800727c:	08007464 	.word	0x08007464
 8007280:	08007468 	.word	0x08007468

08007284 <memcmp>:
 8007284:	b530      	push	{r4, r5, lr}
 8007286:	3901      	subs	r1, #1
 8007288:	2400      	movs	r4, #0
 800728a:	42a2      	cmp	r2, r4
 800728c:	d101      	bne.n	8007292 <memcmp+0xe>
 800728e:	2000      	movs	r0, #0
 8007290:	e005      	b.n	800729e <memcmp+0x1a>
 8007292:	5d03      	ldrb	r3, [r0, r4]
 8007294:	3401      	adds	r4, #1
 8007296:	5d0d      	ldrb	r5, [r1, r4]
 8007298:	42ab      	cmp	r3, r5
 800729a:	d0f6      	beq.n	800728a <memcmp+0x6>
 800729c:	1b58      	subs	r0, r3, r5
 800729e:	bd30      	pop	{r4, r5, pc}

080072a0 <memcpy>:
 80072a0:	440a      	add	r2, r1
 80072a2:	4291      	cmp	r1, r2
 80072a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072a8:	d100      	bne.n	80072ac <memcpy+0xc>
 80072aa:	4770      	bx	lr
 80072ac:	b510      	push	{r4, lr}
 80072ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072b6:	4291      	cmp	r1, r2
 80072b8:	d1f9      	bne.n	80072ae <memcpy+0xe>
 80072ba:	bd10      	pop	{r4, pc}

080072bc <memset>:
 80072bc:	4402      	add	r2, r0
 80072be:	4603      	mov	r3, r0
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d100      	bne.n	80072c6 <memset+0xa>
 80072c4:	4770      	bx	lr
 80072c6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ca:	e7f9      	b.n	80072c0 <memset+0x4>

080072cc <_init>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	bf00      	nop
 80072d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d2:	bc08      	pop	{r3}
 80072d4:	469e      	mov	lr, r3
 80072d6:	4770      	bx	lr

080072d8 <_fini>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	bf00      	nop
 80072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	469e      	mov	lr, r3
 80072e2:	4770      	bx	lr
